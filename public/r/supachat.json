{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "supachat",
  "type": "registry:block",
  "title": "Supabase-Powered Realtime Chat",
  "author": "Bankk <https://bankkroll.xyz>",
  "description": "Production-grade chat system with full source control, Supabase realtime, admin panel, and file uploads.",
  "dependencies": [
    "@supabase/supabase-js",
    "@supabase/ssr",
    "react-markdown",
    "date-fns",
    "lucide-react",
    "clsx",
    "tailwind-merge",
    "zod",
    "react-dropzone",
    "emoji-datasource"
  ],
  "registryDependencies": [
    "button",
    "input",
    "card",
    "avatar",
    "badge",
    "scroll-area",
    "textarea",
    "dropdown-menu",
    "popover",
    "separator",
    "sheet"
  ],
  "files": [
    {
      "path": "registry/supachat/components/ui/avatar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Avatar, AvatarImage, AvatarFallback };\n",
      "type": "registry:component",
      "target": "~/components/ui/avatar.tsx"
    },
    {
      "path": "registry/supachat/components/ui/badge.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\";\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
      "type": "registry:component",
      "target": "~/components/ui/badge.tsx"
    },
    {
      "path": "registry/supachat/components/ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"cursor-pointer inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:component",
      "target": "~/components/ui/button.tsx"
    },
    {
      "path": "registry/supachat/components/ui/card.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n};\n",
      "type": "registry:component",
      "target": "~/components/ui/card.tsx"
    },
    {
      "path": "registry/supachat/components/ui/dropdown-menu.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\";\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />;\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  );\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className,\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  );\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  );\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean;\n  variant?: \"default\" | \"destructive\";\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-pointer items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-pointer items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  );\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-pointer items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  );\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />;\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-pointer items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  );\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n};\n",
      "type": "registry:component",
      "target": "~/components/ui/dropdown-menu.tsx"
    },
    {
      "path": "registry/supachat/components/ui/input.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Input };\n",
      "type": "registry:component",
      "target": "~/components/ui/input.tsx"
    },
    {
      "path": "registry/supachat/components/ui/popover.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />;\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />;\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className,\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  );\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />;\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };\n",
      "type": "registry:component",
      "target": "~/components/ui/popover.tsx"
    },
    {
      "path": "registry/supachat/components/ui/scroll-area.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  );\n}\n\nfunction ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className,\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  );\n}\n\nexport { ScrollArea, ScrollBar };\n",
      "type": "registry:component",
      "target": "~/components/ui/scroll-area.tsx"
    },
    {
      "path": "registry/supachat/components/ui/separator.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Separator };\n",
      "type": "registry:component",
      "target": "~/components/ui/separator.tsx"
    },
    {
      "path": "registry/supachat/components/ui/sheet.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\";\nimport { XIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />;\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />;\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />;\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />;\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = \"right\",\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\";\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n          side === \"right\" &&\n            \"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm\",\n          side === \"left\" &&\n            \"data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\",\n          side === \"top\" &&\n            \"data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b\",\n          side === \"bottom\" &&\n            \"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  );\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n};\n",
      "type": "registry:component",
      "target": "~/components/ui/sheet.tsx"
    },
    {
      "path": "registry/supachat/components/ui/textarea.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Textarea };\n",
      "type": "registry:component",
      "target": "~/components/ui/textarea.tsx"
    },
    {
      "path": "registry/supachat/components/chat-widget.tsx",
      "content": "/**\n * SupaChat - Chat Widget Component\n * Main chat bubble component with realtime messaging, emoji, uploads, and advanced config support.\n */\n\nimport { EmojiPicker } from \"@/components/supachat/emoji-picker\";\nimport { FileUploadButton } from \"@/components/supachat/file-upload\";\nimport { MessageBubble } from \"@/components/supachat/message-bubble\";\nimport { TypingIndicator } from \"@/components/supachat/typing-indicator\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useChat } from \"@/hooks/supachat/use-chat\";\nimport { useChatStatus } from \"@/hooks/supachat/use-chat-status\";\nimport { createChatStore } from \"@/hooks/supachat/use-chat-store\";\nimport { defaultConfig, validateConfig } from \"@/lib/supachat/config\";\nimport type {\n  ButtonAction,\n  ChatMessage,\n  ChatWidgetProps,\n  SupaChatConfig,\n  WelcomeMessage,\n} from \"@/lib/supachat/types\";\nimport { cn } from \"@/lib/utils\";\nimport { MessageCircle, Send, X } from \"lucide-react\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\ntype WelcomeFlowState = \"idle\" | \"running\" | \"complete\";\n\nexport function ChatWidget(props: ChatWidgetProps & Partial<SupaChatConfig>) {\n  return (\n    <AnimatePresence mode=\"wait\">\n      <ChatWidgetContent {...props} />\n    </AnimatePresence>\n  );\n}\n\nfunction ChatWidgetContent(props: ChatWidgetProps & Partial<SupaChatConfig>) {\n  const [isOpen, setIsOpen] = useState(props.showOnLoad ?? false);\n  const [message, setMessage] = useState(\"\");\n  const [initialStep, setInitialStep] = useState(0);\n  const [showTyping, setShowTyping] = useState(false);\n  const [welcomeFlow, setWelcomeFlow] = useState<WelcomeFlowState>(\"idle\");\n  const scrollRef = React.useRef<HTMLDivElement>(null);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const config = useMemo(\n    () =>\n      validateConfig({\n        ...defaultConfig,\n        ...props,\n        chatWidgetPosition: props.position ?? defaultConfig.chatWidgetPosition,\n        chatWidgetSize: props.size ?? defaultConfig.chatWidgetSize,\n      }),\n    [props],\n  );\n\n  const chatStore = useMemo(\n    () => createChatStore({ localStorageKey: config.localStorageKey }),\n    [config.localStorageKey],\n  );\n  const inputLocked = chatStore((s: any) => s.inputLocked);\n  const setInputLocked = chatStore((s: any) => s.setInputLocked);\n\n  const {\n    sendMessage,\n    createRoom,\n    isLoading,\n    error,\n    messages,\n    currentRoom,\n    hasNewMessages,\n    markAsRead,\n  } = useChat(config);\n  const { isOnline } = useChatStatus(config);\n\n  useEffect(() => {\n    if (isOpen && hasNewMessages) {\n      markAsRead();\n    }\n  }, [isOpen, hasNewMessages, markAsRead]);\n\n  useEffect(() => {\n    if (isOpen && !currentRoom) {\n      createRoom();\n    }\n  }, [isOpen, currentRoom, createRoom]);\n\n  const showNextInitial = useCallback(\n    (step: number) => {\n      if (!config.welcomeMessages || step >= config.welcomeMessages.length) {\n        setShowTyping(false);\n        setWelcomeFlow(\"complete\");\n        return;\n      }\n      setWelcomeFlow(\"running\");\n      const msg = config.welcomeMessages[step];\n      setShowTyping(true);\n      setTimeout(() => {\n        setShowTyping(false);\n        setInitialStep((s) => s + 1);\n        setTimeout(\n          () => showNextInitial(step + 1),\n          (config.welcomeMessages?.[step + 1]?.delay ??\n            config.agentTypingDelay) ||\n            0,\n        );\n      }, msg.delay ?? config.agentTypingDelay);\n    },\n    [config.welcomeMessages, config.agentTypingDelay],\n  );\n\n  useEffect(() => {\n    if (\n      config.welcomeMessages &&\n      isOpen &&\n      currentRoom &&\n      welcomeFlow === \"idle\" &&\n      Array.isArray(messages) &&\n      messages.length === 0\n    ) {\n      setInitialStep(0);\n      setShowTyping(false);\n      setWelcomeFlow(\"running\");\n      if (config.welcomeMessages.length > 0) {\n        showNextInitial(0);\n      }\n    }\n  }, [\n    config.welcomeMessages,\n    isOpen,\n    currentRoom,\n    showNextInitial,\n    welcomeFlow,\n    messages.length,\n  ]);\n\n  const bottomRef = React.useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    bottomRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages, initialStep, showTyping]);\n\n  useEffect(() => {\n    if (!config.inputLockedAfterSend) {\n      setInputLocked(false);\n      return;\n    }\n    if (messages.length === 0) {\n      setInputLocked(false);\n      return;\n    }\n    const lastMsg = messages[messages.length - 1];\n    if (!lastMsg) {\n      setInputLocked(false);\n      return;\n    }\n    if (!lastMsg.isFromAdmin) {\n      setInputLocked(true);\n    } else {\n      setInputLocked(false);\n    }\n  }, [messages, config.inputLockedAfterSend, setInputLocked]);\n\n  const handleSendMessage = useCallback(async () => {\n    if (!message.trim() || isLoading) return;\n    await sendMessage(message.trim());\n    setMessage(\"\");\n    inputRef.current?.focus();\n    setWelcomeFlow(\"complete\");\n  }, [message, isLoading, sendMessage, config.inputLockedAfterSend]);\n\n  const handleKeyPress = useCallback(\n    (e: React.KeyboardEvent) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage],\n  );\n\n  const handleTyping = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (inputLocked) return;\n      let value = e.target.value;\n      if (config.maxMessageLength && value.length > config.maxMessageLength) {\n        value = value.slice(0, config.maxMessageLength);\n      }\n      setMessage(value);\n    },\n    [inputLocked, config.maxMessageLength],\n  );\n\n  const handleButtonClick = useCallback((action: ButtonAction) => {\n    if (action.callback) action.callback(action.value);\n    if (action.value) setMessage(action.value);\n  }, []);\n\n  const handleFileSelect = useCallback(\n    async (file: File) => {\n      await sendMessage(\"[File uploaded]\", file);\n      setWelcomeFlow(\"complete\");\n    },\n    [sendMessage],\n  );\n\n  const handleEmojiSelect = useCallback(\n    (emoji: string) => {\n      if (!inputRef.current) return;\n      const input = inputRef.current;\n      const start = input.selectionStart || 0;\n      const end = input.selectionEnd || 0;\n      const newValue = message.slice(0, start) + emoji + message.slice(end);\n      setMessage(newValue);\n      setTimeout(() => {\n        input.focus();\n        input.setSelectionRange(start + emoji.length, start + emoji.length);\n      }, 0);\n    },\n    [message],\n  );\n\n  const positionClasses = useMemo(\n    () => ({\n      \"bottom-right\": \"bottom-2 right-2 sm:bottom-4 sm:right-4\",\n      \"bottom-left\": \"bottom-2 left-2 sm:bottom-4 sm:left-4\",\n      \"top-right\": \"top-2 right-2 sm:top-4 sm:right-4\",\n      \"top-left\": \"top-2 left-2 sm:top-4 sm:left-4\",\n    }),\n    [],\n  );\n\n  if (!isOpen) {\n    return (\n      <motion.div\n        key=\"chat-button\"\n        className=\"relative\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ duration: 0.2 }}\n      >\n        <Button\n          onClick={() => {\n            setIsOpen(true);\n          }}\n          className={cn(\n            \"fixed z-50 rounded-full shadow-lg transition-all duration-300\",\n            \"h-12 w-12 sm:h-auto sm:w-auto sm:px-4 sm:py-2\",\n            \"text-sm sm:text-base\",\n            positionClasses[config.chatWidgetPosition!],\n          )}\n          size=\"lg\"\n        >\n          <MessageCircle className=\"h-5 w-5 sm:mr-2\" />\n          <span className=\"hidden sm:inline\">Chat with us</span>\n        </Button>\n        <AnimatePresence>\n          {hasNewMessages && (\n            <motion.div\n              className=\"absolute -top-1 -right-1\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.2 }}\n            >\n              <div className=\"w-3 h-3 bg-red-500 rounded-full animate-ping\" />\n              <div className=\"absolute top-0 right-0 w-3 h-3 bg-red-500 rounded-full\" />\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </motion.div>\n    );\n  }\n\n  return (\n    <motion.div\n      key=\"chat-widget\"\n      className={cn(\n        \"fixed z-50\",\n        positionClasses[config.chatWidgetPosition!],\n        props.className,\n      )}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: 20 }}\n      transition={{ duration: 0.3, ease: \"easeOut\" }}\n    >\n      <Card\n        className={cn(\n          \"shadow-xl\",\n          \"w-[calc(100vw-1rem)] max-w-[400px] h-[calc(100vh-2rem)] p-0 gap-0\",\n        )}\n        style={{\n          width: config.chatWidgetSize?.width\n            ? `${config.chatWidgetSize.width}px`\n            : undefined,\n          height: config.chatWidgetSize?.height\n            ? `${config.chatWidgetSize.height}px`\n            : undefined,\n          maxWidth: config.chatWidgetSize?.width\n            ? `${config.chatWidgetSize.width}px`\n            : undefined,\n          maxHeight: config.chatWidgetSize?.height\n            ? `${config.chatWidgetSize.height}px`\n            : undefined,\n        }}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-label=\"Chat widget\"\n      >\n        <CardHeader className=\"p-2 pb-1\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Avatar className=\"h-6 w-6 sm:h-8 sm:w-8\">\n                <AvatarImage src={config.adminAvatar} />\n                <AvatarFallback className=\"text-xs sm:text-sm\">\n                  SA\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"min-w-0 flex-1\">\n                <CardTitle className=\"text-xs sm:text-sm font-semibold truncate\">\n                  {props.title ?? \"Support Team\"}\n                </CardTitle>\n                <div className=\"flex items-center space-x-1\">\n                  <div\n                    className={cn(\n                      \"w-1.5 h-1.5 sm:w-2 sm:h-2 rounded-full\",\n                      isOnline ? \"bg-green-500\" : \"bg-gray-400\",\n                    )}\n                    aria-label={isOnline ? \"Online\" : \"Offline\"}\n                  />\n                  <span className=\"text-xs text-muted-foreground\">\n                    {isOnline ? \"Online\" : \"Offline\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setIsOpen(false)}\n              aria-label=\"Close chat\"\n            >\n              <X className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n            </Button>\n          </div>\n        </CardHeader>\n        <Separator />\n        <CardContent className=\"p-0 flex flex-col h-full\">\n          <div className=\"flex-1 min-h-0\">\n            <div className=\"h-full\">\n              <ScrollArea\n                className=\"flex-1\"\n                style={{\n                  height: config.chatWidgetSize?.height\n                    ? `${config.chatWidgetSize.height - 130}px`\n                    : undefined,\n                }}\n                ref={scrollRef}\n              >\n                <div className=\"p-2 sm:p-4 space-y-2 sm:space-y-4\">\n                  {config.welcomeMessages &&\n                    initialStep > 0 &&\n                    config.welcomeMessages\n                      .slice(0, initialStep)\n                      .map((msg: WelcomeMessage, i) => (\n                        <MessageBubble\n                          key={i}\n                          message={{\n                            id: `init-${i}`,\n                            roomId: currentRoom?.id || \"\",\n                            content: msg.content,\n                            messageType: \"system\",\n                            isFromAdmin: msg.isFromAdmin,\n                            createdAt: new Date().toISOString(),\n                          }}\n                          isOwnMessage={!msg.isFromAdmin}\n                          buttons={msg.buttons}\n                          onButtonClick={handleButtonClick}\n                          adminAvatar={config.adminAvatar}\n                          userAvatar={config.userAvatar}\n                        />\n                      ))}\n                  {messages.map((msg: ChatMessage) => (\n                    <MessageBubble\n                      key={msg.id}\n                      message={msg}\n                      isOwnMessage={!msg.isFromAdmin}\n                      adminAvatar={config.adminAvatar}\n                      userAvatar={config.userAvatar}\n                    />\n                  ))}\n                  {showTyping && (\n                    <TypingIndicator adminAvatar={config.adminAvatar} />\n                  )}\n                  {error && (\n                    <div\n                      className=\"text-red-500 text-xs sm:text-sm p-2 bg-red-50 rounded\"\n                      role=\"alert\"\n                    >\n                      {error}\n                    </div>\n                  )}\n                  <div ref={bottomRef} />\n                </div>\n              </ScrollArea>\n            </div>\n          </div>\n          <Separator />\n          <div className=\"p-2\">\n            <form\n              className=\"flex\"\n              onSubmit={(e) => {\n                e.preventDefault();\n                handleSendMessage();\n              }}\n              aria-label=\"Chat input form\"\n            >\n              {config.enableUploads !== false && (\n                <FileUploadButton\n                  onFileSelect={handleFileSelect}\n                  disabled={isLoading || showTyping || inputLocked}\n                  maxSize={config.maxFileSize}\n                  allowedTypes={config.allowedFileTypes}\n                />\n              )}\n              {config.enableEmojis !== false && (\n                <EmojiPicker\n                  onSelect={handleEmojiSelect}\n                  disabled={isLoading || showTyping || inputLocked}\n                />\n              )}\n              <Input\n                ref={inputRef}\n                value={message}\n                onChange={handleTyping}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Type your message...\"\n                disabled={isLoading || showTyping || inputLocked}\n                className=\"flex-1 text-xs sm:text-sm mx-2\"\n                aria-label=\"Type your message\"\n                autoComplete=\"off\"\n                maxLength={config.maxMessageLength}\n              />\n              <Button\n                type=\"submit\"\n                disabled={\n                  !message.trim() || isLoading || showTyping || inputLocked\n                }\n                size=\"sm\"\n                className=\"h-8 w-8 sm:h-9 sm:w-auto sm:px-3 p-0\"\n                aria-label=\"Send message\"\n              >\n                <Send className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n              </Button>\n            </form>\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}\n",
      "type": "registry:component",
      "target": "~/components/supachat/chat-widget.tsx"
    },
    {
      "path": "registry/supachat/components/admin-panel.tsx",
      "content": "/**\n * SupaChat - Admin Panel Component\n * Complete admin interface for managing chat conversations, with realtime messaging, emoji, uploads, and advanced config support.\n */\n\n\"use client\";\n\nimport { EmojiPicker } from \"@/components/supachat/emoji-picker\";\nimport { FileUploadButton } from \"@/components/supachat/file-upload\";\nimport { MessageBubble } from \"@/components/supachat/message-bubble\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useAdmin } from \"@/hooks/supachat/use-admin\";\nimport { useChat } from \"@/hooks/supachat/use-chat\";\nimport { createChatStore } from \"@/hooks/supachat/use-chat-store\";\nimport { defaultConfig, validateConfig } from \"@/lib/supachat/config\";\nimport type { ChatMessage, ChatRoom } from \"@/lib/supachat/types\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Clock,\n  Menu,\n  MessageCircle,\n  MoreHorizontal,\n  Search,\n  Send,\n  Trash2,\n  X,\n} from \"lucide-react\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\nexport function AdminPanel() {\n  const [selectedRoom, setSelectedRoom] = useState<ChatRoom | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const scrollRef = React.useRef<HTMLDivElement>(null);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const config = validateConfig(defaultConfig);\n  const chatStore = useMemo(\n    () => createChatStore({ localStorageKey: config.localStorageKey }),\n    [config.localStorageKey],\n  );\n  const setInputLocked = chatStore((s: any) => s.setInputLocked);\n\n  const { rooms, isLoading, error, sendAdminMessage, deleteRoom, markAsRead } =\n    useAdmin(config);\n  const { messages } = useChat(config);\n\n  const filteredRooms = rooms.filter(\n    (room) =>\n      room.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      room.guestSessionId?.includes(searchQuery),\n  );\n\n  const bottomRef = React.useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    bottomRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleSendMessage = useCallback(async () => {\n    if (!message.trim() || !selectedRoom) return;\n\n    await sendAdminMessage(selectedRoom.id, message.trim());\n    setMessage(\"\");\n    setInputLocked(false);\n  }, [message, selectedRoom, sendAdminMessage, setInputLocked]);\n\n  const handleKeyPress = useCallback(\n    (e: React.KeyboardEvent) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage],\n  );\n\n  const handleFileSelect = useCallback(\n    async (file: File) => {\n      if (!selectedRoom) return;\n      await sendAdminMessage(selectedRoom.id, `[File uploaded: ${file.name}]`);\n      setMessage(\"\");\n    },\n    [selectedRoom, sendAdminMessage],\n  );\n\n  const handleEmojiSelect = useCallback(\n    (emoji: string) => {\n      if (!inputRef.current) return;\n      const input = inputRef.current;\n      const start = input.selectionStart || 0;\n      const end = input.selectionEnd || 0;\n      const newValue = message.slice(0, start) + emoji + message.slice(end);\n      setMessage(newValue);\n      setTimeout(() => {\n        input.focus();\n        input.setSelectionRange(start + emoji.length, start + emoji.length);\n      }, 0);\n    },\n    [message],\n  );\n\n  const handleTyping = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      let value = e.target.value;\n      if (config.maxMessageLength && value.length > config.maxMessageLength) {\n        value = value.slice(0, config.maxMessageLength);\n      }\n      setMessage(value);\n    },\n    [config.maxMessageLength],\n  );\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <div\n        className={cn(\n          \"w-full sm:w-80 h-full border-r bg-muted/30\",\n          \"lg:relative lg:translate-x-0\",\n          isSidebarOpen ? \"block\" : \"hidden lg:block\",\n        )}\n      >\n        <div className=\"p-3 sm:p-4 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-base sm:text-lg font-semibold\">\n                SupaChat Admin\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Manage conversations\n              </p>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsSidebarOpen(false)}\n              className=\"lg:hidden h-8 w-8 p-0\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"p-3 sm:p-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search conversations...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 text-sm\"\n            />\n          </div>\n        </div>\n\n        <ScrollArea className=\"h-[calc(100vh-140px)] sm:h-[calc(100vh-160px)]\">\n          <div className=\"space-y-2 p-2 sm:p-3\">\n            {filteredRooms.map((room) => (\n              <RoomCard\n                key={room.id}\n                room={room}\n                isSelected={selectedRoom?.id === room.id}\n                onSelect={() => {\n                  setSelectedRoom(room);\n                  setIsSidebarOpen(false);\n                }}\n                onDelete={() => deleteRoom(room.id)}\n                onMarkAsRead={() => markAsRead(room.id)}\n                userAvatar={config.userAvatar}\n              />\n            ))}\n          </div>\n        </ScrollArea>\n      </div>\n\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <div className=\"p-3 sm:p-4 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2 sm:space-x-3 min-w-0 flex-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsSidebarOpen(true)}\n                className=\"lg:hidden h-8 w-8 p-0\"\n              >\n                <Menu className=\"h-4 w-4\" />\n              </Button>\n\n              {selectedRoom ? (\n                <>\n                  <Avatar className=\"h-6 w-6 sm:h-8 sm:w-8 flex-shrink-0\">\n                    <AvatarImage src={config.userAvatar} />\n                    <AvatarFallback className=\"text-sm\">\n                      {selectedRoom.name?.charAt(0) || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"min-w-0 flex-1\">\n                    <h2 className=\"font-semibold text-sm sm:text-base truncate\">\n                      {selectedRoom.name ||\n                        `Guest ${selectedRoom.guestSessionId?.slice(0, 8)}`}\n                    </h2>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {selectedRoom.isGuestRoom\n                        ? \"Guest Session\"\n                        : \"User Session\"}\n                    </p>\n                  </div>\n                </>\n              ) : (\n                <div className=\"min-w-0 flex-1\">\n                  <h2 className=\"font-semibold text-sm sm:text-base\">\n                    Select a conversation\n                  </h2>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Choose from the sidebar to start chatting\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {selectedRoom && (\n              <div className=\"flex items-center space-x-2 flex-shrink-0\">\n                <Badge\n                  variant={\n                    selectedRoom.unreadCount > 0 ? \"destructive\" : \"secondary\"\n                  }\n                  className=\"text-xs\"\n                >\n                  {selectedRoom.unreadCount} unread\n                </Badge>\n                <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                  <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {selectedRoom ? (\n          <>\n            <ScrollArea className=\"flex-1 p-2 sm:p-3 lg:p-4\" ref={scrollRef}>\n              <div className=\"space-y-2 sm:space-y-3 lg:space-y-4\">\n                {messages.map((msg: ChatMessage) => (\n                  <MessageBubble\n                    key={msg.id}\n                    message={msg}\n                    isOwnMessage={!msg.isFromAdmin}\n                    adminAvatar={config.adminAvatar}\n                    userAvatar={config.userAvatar}\n                  />\n                ))}\n                <div ref={bottomRef} />\n              </div>\n            </ScrollArea>\n\n            <div className=\"p-2 sm:p-3 border-t\">\n              <form\n                className=\"flex items-center gap-2\"\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  handleSendMessage();\n                }}\n                aria-label=\"Admin chat input form\"\n              >\n                {config.enableUploads !== false && (\n                  <FileUploadButton\n                    onFileSelect={handleFileSelect}\n                    disabled={false}\n                    maxSize={config.maxFileSize}\n                    allowedTypes={config.allowedFileTypes}\n                  />\n                )}\n                {config.enableEmojis !== false && (\n                  <EmojiPicker onSelect={handleEmojiSelect} />\n                )}\n                <Input\n                  ref={inputRef}\n                  value={message}\n                  onChange={handleTyping}\n                  onKeyPress={handleKeyPress}\n                  placeholder=\"Type your message...\"\n                  disabled={false}\n                  className=\"flex-1 text-sm\"\n                  aria-label=\"Type your message\"\n                  autoComplete=\"off\"\n                  maxLength={config.maxMessageLength}\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!message.trim()}\n                  size=\"sm\"\n                  className=\"h-9 w-9 sm:h-10 sm:w-auto sm:px-4 p-0\"\n                  aria-label=\"Send message\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </form>\n            </div>\n          </>\n        ) : (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center p-4\">\n              <MessageCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">\n                No conversation selected\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Select a conversation from the sidebar to start chatting\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction RoomCard({\n  room,\n  isSelected,\n  onSelect,\n  onDelete,\n  onMarkAsRead,\n  userAvatar,\n}: {\n  room: ChatRoom;\n  isSelected: boolean;\n  onSelect: () => void;\n  onDelete: () => void;\n  onMarkAsRead: () => void;\n  userAvatar: string;\n}) {\n  return (\n    <Card\n      className={cn(\n        \"cursor-pointer transition-colors hover:bg-accent\",\n        isSelected && \"bg-accent border-primary\",\n      )}\n      onClick={onSelect}\n    >\n      <CardContent>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-1 sm:space-x-2 lg:space-x-3 min-w-0 flex-1\">\n            <Avatar className=\"h-5 w-5 sm:h-6 sm:w-6 lg:h-8 lg:w-8 flex-shrink-0\">\n              <AvatarImage src={userAvatar} />\n              <AvatarFallback className=\"text-xs\">\n                {room.name?.charAt(0) || \"G\"}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"min-w-0 flex-1\">\n              <p className=\"font-medium text-xs sm:text-sm truncate\">\n                {room.name || `Guest ${room.guestSessionId?.slice(0, 8)}`}\n              </p>\n              <p className=\"text-xs text-muted-foreground truncate\">\n                {room.lastMessage?.content || \"No messages yet\"}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-1 flex-shrink-0\">\n            {room.unreadCount > 0 && (\n              <Badge variant=\"destructive\" className=\"text-xs\">\n                {room.unreadCount}\n              </Badge>\n            )}\n            <div className=\"flex items-center space-x-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onMarkAsRead();\n                }}\n                className=\"h-5 w-5 sm:h-6 sm:w-6 p-0\"\n              >\n                <Clock className=\"h-2.5 w-2.5 sm:h-3 sm:w-3\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onDelete();\n                }}\n                className=\"h-5 w-5 sm:h-6 sm:w-6 p-0 text-destructive\"\n              >\n                <Trash2 className=\"h-2.5 w-2.5 sm:h-3 sm:w-3\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": "~/components/supachat/admin-panel.tsx"
    },
    {
      "path": "registry/supachat/components/message-bubble.tsx",
      "content": "/**\n * SupaChat - Message Bubble Component\n * Displays chat messages, files, and actions in a styled bubble.\n */\n\n\"use client\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport type { ButtonAction, ChatMessage } from \"@/lib/supachat/types\";\nimport { cn } from \"@/lib/utils\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Download, Paperclip } from \"lucide-react\";\n\nexport interface MessageBubbleProps {\n  message: ChatMessage;\n  isOwnMessage?: boolean;\n  showAvatar?: boolean;\n  showTimestamp?: boolean;\n  className?: string;\n  buttons?: ButtonAction[];\n  onButtonClick?: (action: ButtonAction) => void;\n  adminAvatar: string;\n  userAvatar: string;\n}\n\nexport function MessageBubble({\n  message,\n  isOwnMessage = false,\n  showAvatar = true,\n  showTimestamp = true,\n  className,\n  buttons,\n  onButtonClick,\n  adminAvatar,\n  userAvatar,\n}: MessageBubbleProps) {\n  const isFromAdmin = message.isFromAdmin;\n  const isFileMessage = message.messageType === \"file\";\n  const isImageFile =\n    isFileMessage && message.fileName?.match(/\\.(jpg|jpeg|png|gif|webp)$/i);\n\n  const handleFileDownload = () => {\n    if (message.fileUrl) {\n      const link = document.createElement(\"a\");\n      link.href = message.fileUrl;\n      link.download = message.fileName || \"download\";\n      link.click();\n    }\n  };\n\n  const formatFileSize = (bytes?: number) => {\n    if (!bytes) return \"\";\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round((bytes / Math.pow(1024, i)) * 100) / 100 + \" \" + sizes[i];\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex gap-1 sm:gap-2 group\",\n        isOwnMessage ? \"flex-row-reverse\" : \"flex-row\",\n        className,\n      )}\n    >\n      {showAvatar && !isOwnMessage && (\n        <Avatar className=\"h-6 w-6 sm:h-8 sm:w-8 flex-shrink-0\">\n          <AvatarImage src={isFromAdmin ? adminAvatar : userAvatar} />\n          <AvatarFallback className=\"text-xs sm:text-sm\">\n            {isFromAdmin ? \"A\" : \"U\"}\n          </AvatarFallback>\n        </Avatar>\n      )}\n      <div\n        className={cn(\n          \"flex flex-col max-w-[85%] sm:max-w-[80%]\",\n          isOwnMessage ? \"items-end\" : \"items-start\",\n        )}\n      >\n        <div\n          className={cn(\n            \"rounded-lg px-2 py-1.5 sm:px-3 sm:py-2\",\n            isOwnMessage\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-muted text-foreground\",\n          )}\n        >\n          {isFileMessage ? (\n            <div className=\"space-y-1.5 sm:space-y-2\">\n              {isImageFile && message.fileUrl && (\n                <div className=\"rounded-md overflow-hidden\">\n                  <img\n                    src={message.fileUrl}\n                    alt={message.fileName || \"Image\"}\n                    className=\"max-w-full h-auto max-h-48 sm:max-h-64 object-cover\"\n                  />\n                </div>\n              )}\n              <div className=\"flex items-center gap-1.5 sm:gap-2\">\n                <Paperclip className=\"h-3 w-3 sm:h-4 sm:w-4 flex-shrink-0\" />\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-xs sm:text-sm font-medium truncate\">\n                    {message.fileName}\n                  </p>\n                  {message.fileSize && (\n                    <p className=\"text-xs opacity-70\">\n                      {formatFileSize(message.fileSize)}\n                    </p>\n                  )}\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleFileDownload}\n                  className=\"h-5 w-5 sm:h-6 sm:w-6 p-0 opacity-70 hover:opacity-100\"\n                >\n                  <Download className=\"h-2.5 w-2.5 sm:h-3 sm:w-3\" />\n                </Button>\n              </div>\n              {message.content && (\n                <p className=\"text-xs sm:text-sm mt-1.5 sm:mt-2\">\n                  {message.content}\n                </p>\n              )}\n            </div>\n          ) : (\n            <p className=\"text-xs sm:text-sm whitespace-pre-wrap break-words\">\n              {message.content}\n            </p>\n          )}\n        </div>\n        {buttons && buttons.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 sm:gap-2 mt-1.5 sm:mt-2\">\n            {buttons.map((btn) => (\n              <Button\n                key={btn.value}\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onButtonClick?.(btn)}\n                className=\"text-xs h-7 px-2 sm:h-8 sm:px-3\"\n              >\n                {btn.label}\n              </Button>\n            ))}\n          </div>\n        )}\n        {showTimestamp && (\n          <p\n            className={cn(\n              \"text-xs opacity-70 mt-1\",\n              isOwnMessage ? \"text-right\" : \"text-left\",\n            )}\n          >\n            {formatDistanceToNow(new Date(message.createdAt), {\n              addSuffix: true,\n            })}\n          </p>\n        )}\n      </div>\n      {showAvatar && isOwnMessage && (\n        <Avatar className=\"h-6 w-6 sm:h-8 sm:w-8 flex-shrink-0\">\n          <AvatarImage src={userAvatar} />\n          <AvatarFallback className=\"text-xs sm:text-sm\">U</AvatarFallback>\n        </Avatar>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "~/components/supachat/message-bubble.tsx"
    },
    {
      "path": "registry/supachat/components/typing-indicator.tsx",
      "content": "/**\n * SupaChat - Typing Indicator Component\n * Animated typing indicator for chat UI.\n */\n\n\"use client\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface TypingIndicatorProps {\n  isTyping?: boolean;\n  showAvatar?: boolean;\n  className?: string;\n  adminAvatar: string;\n}\n\nexport function TypingIndicator({\n  isTyping = true,\n  showAvatar = true,\n  className,\n  adminAvatar,\n}: TypingIndicatorProps) {\n  if (!isTyping) return null;\n\n  return (\n    <div className={cn(\"flex gap-1 sm:gap-2\", className)}>\n      {showAvatar && (\n        <Avatar className=\"h-6 w-6 sm:h-8 sm:w-8 flex-shrink-0\">\n          <AvatarImage src={adminAvatar} />\n          <AvatarFallback className=\"text-xs sm:text-sm\">A</AvatarFallback>\n        </Avatar>\n      )}\n\n      <div className=\"bg-muted rounded-lg px-2 py-1.5 sm:px-3 sm:py-3\">\n        <div className=\"flex space-x-0.5 sm:space-x-1\">\n          <div className=\"w-1.5 h-1.5 sm:w-2 sm:h-2 bg-muted-foreground rounded-full animate-bounce\" />\n          <div\n            className=\"w-1.5 h-1.5 sm:w-2 sm:h-2 bg-muted-foreground rounded-full animate-bounce\"\n            style={{ animationDelay: \"0.1s\" }}\n          />\n          <div\n            className=\"w-1.5 h-1.5 sm:w-2 sm:h-2 bg-muted-foreground rounded-full animate-bounce\"\n            style={{ animationDelay: \"0.2s\" }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "~/components/supachat/typing-indicator.tsx"
    },
    {
      "path": "registry/supachat/components/file-upload.tsx",
      "content": "/**\n * SupaChat - File Upload Component\n * File upload button with drag-and-drop and preview for chat input.\n */\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport { Edit, File, Trash2, Upload, X } from \"lucide-react\";\nimport { useCallback, useRef, useState } from \"react\";\n\nexport interface FileUploadButtonProps {\n  onFileSelect: (file: File) => Promise<void>;\n  maxSize?: number;\n  allowedTypes?: string[];\n  className?: string;\n  disabled?: boolean;\n}\n\nfunction getFileExtension(name: string) {\n  const parts = name.split(\".\");\n  return parts.length > 1 ? parts.pop()!.toUpperCase() : \"\";\n}\n\nexport function FileUploadButton({\n  onFileSelect,\n  maxSize = 10 * 1024 * 1024,\n  allowedTypes = [\"image/*\", \"application/pdf\", \"text/*\"],\n  className,\n  disabled = false,\n}: FileUploadButtonProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [dragActive, setDragActive] = useState(false);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [popoverOpen, setPopoverOpen] = useState(false);\n\n  const handleFile = useCallback(\n    async (file: File) => {\n      setError(null);\n      setUploading(true);\n      setPreviewUrl(null);\n      setSelectedFile(null);\n      try {\n        if (file.size > maxSize) {\n          setError(\n            `File too large. Max size: ${Math.round(maxSize / 1024 / 1024)}MB`,\n          );\n          return;\n        }\n        if (allowedTypes && allowedTypes.length > 0) {\n          const valid = allowedTypes.some((type) =>\n            file.type.match(type.replace(\"*\", \".*\")),\n          );\n          if (!valid) {\n            setError(\"File type not allowed\");\n            return;\n          }\n        }\n        if (file.type.startsWith(\"image/\")) {\n          setPreviewUrl(URL.createObjectURL(file));\n        } else {\n          setPreviewUrl(null);\n        }\n        setSelectedFile(file);\n        await onFileSelect(file);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : \"Upload failed\");\n      } finally {\n        setUploading(false);\n      }\n    },\n    [onFileSelect, maxSize, allowedTypes],\n  );\n\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) handleFile(file);\n  };\n\n  const onDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragActive(false);\n    if (disabled || uploading) return;\n    const file = e.dataTransfer.files?.[0];\n    if (file) handleFile(file);\n  };\n\n  const handleRemove = () => {\n    setPreviewUrl(null);\n    setSelectedFile(null);\n    setPopoverOpen(false);\n    if (inputRef.current) {\n      inputRef.current.value = \"\";\n    }\n  };\n\n  const handleEdit = () => {\n    setPopoverOpen(false);\n    inputRef.current?.click();\n  };\n\n  const formatFileSize = (bytes: number) => {\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round((bytes / Math.pow(1024, i)) * 100) / 100 + \" \" + sizes[i];\n  };\n\n  const isImage = selectedFile && selectedFile.type.startsWith(\"image/\");\n  const fileExt = selectedFile ? getFileExtension(selectedFile.name) : \"\";\n\n  return (\n    <div\n      className={cn(\n        \"relative flex items-center\",\n        dragActive && \"ring-2 ring-primary/60 bg-primary/5\",\n        className,\n      )}\n      onDragOver={(e) => {\n        e.preventDefault();\n        if (!disabled && !uploading) setDragActive(true);\n      }}\n      onDragLeave={() => setDragActive(false)}\n      onDrop={onDrop}\n    >\n      <input\n        ref={inputRef}\n        type=\"file\"\n        accept={allowedTypes.join(\",\")}\n        className=\"hidden\"\n        onChange={onInputChange}\n        disabled={disabled || uploading}\n      />\n      {selectedFile ? (\n        <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"icon\"\n              aria-label={isImage ? \"View image preview\" : \"View file details\"}\n              disabled={disabled}\n              className=\"h-8 w-8 sm:h-9 sm:w-9 p-0 overflow-hidden rounded-lg\"\n            >\n              {isImage && previewUrl ? (\n                <img\n                  src={previewUrl}\n                  alt={selectedFile.name}\n                  className=\"object-cover w-full h-full rounded-lg\"\n                  style={{ display: \"block\" }}\n                />\n              ) : (\n                <div className=\"flex flex-col items-center justify-center w-full h-full\">\n                  <File className=\"h-5 w-5 text-muted-foreground\" />\n                  <span className=\"text-[10px] font-semibold text-muted-foreground leading-none mt-0.5\">\n                    {fileExt}\n                  </span>\n                </div>\n              )}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent side=\"top\" className=\"w-64 p-0\" align=\"start\">\n            <div className=\"p-3 border-b\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium truncate\">\n                  {selectedFile.name}\n                </span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {formatFileSize(selectedFile.size)}\n                </span>\n              </div>\n            </div>\n            <div className=\"p-3\">\n              {isImage && previewUrl ? (\n                <img\n                  src={previewUrl}\n                  alt={selectedFile.name}\n                  className=\"w-full h-40 object-cover rounded-lg mb-3\"\n                />\n              ) : (\n                <div className=\"flex flex-col items-center justify-center w-full h-40 bg-muted rounded-lg mb-3\">\n                  <File className=\"h-8 w-8 text-muted-foreground mb-2\" />\n                  <span className=\"text-xs font-semibold text-muted-foreground\">\n                    {fileExt}\n                  </span>\n                </div>\n              )}\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleEdit}\n                  className=\"flex-1\"\n                  aria-label=\"Change file\"\n                >\n                  <Edit className=\"h-3 w-3 mr-1\" />\n                  Change\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={handleRemove}\n                  className=\"flex-1\"\n                  aria-label=\"Remove file\"\n                >\n                  <Trash2 className=\"h-3 w-3 mr-1\" />\n                  Remove\n                </Button>\n              </div>\n            </div>\n          </PopoverContent>\n        </Popover>\n      ) : (\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"icon\"\n          aria-label=\"Attach file\"\n          disabled={disabled || uploading}\n          onClick={() => inputRef.current?.click()}\n          className=\"h-8 w-8 sm:h-9 sm:w-9\"\n        >\n          {uploading ? (\n            <Upload className=\"h-4 w-4 animate-spin\" />\n          ) : (\n            <File className=\"h-4 w-4\" />\n          )}\n        </Button>\n      )}\n      {error && (\n        <div className=\"absolute left-full ml-1 sm:ml-2 bg-destructive/90 text-white text-xs rounded px-1 sm:px-2 py-0.5 sm:py-1 z-10 flex items-center gap-1 max-w-32 sm:max-w-48\">\n          <X className=\"h-2.5 w-2.5 sm:h-3 sm:w-3 flex-shrink-0\" />\n          <span className=\"truncate\">{error}</span>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "~/components/supachat/file-upload.tsx"
    },
    {
      "path": "registry/supachat/components/emoji-picker.tsx",
      "content": "/**\n * SupaChat - Emoji Picker Component\n * Emoji picker with intelligent categories, search, and optimized UX.\n */\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\nimport emojiData from \"emoji-datasource/emoji.json\";\nimport { Search, Smile } from \"lucide-react\";\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\ninterface EmojiItem {\n  unified: string;\n  short_name: string;\n  short_names: string[];\n  category: string;\n  subcategory: string;\n  name: string;\n  sort_order: number;\n  added_in: string;\n  has_img_apple: boolean;\n  has_img_google: boolean;\n  has_img_twitter: boolean;\n  has_img_facebook: boolean;\n  skin_variations?: Record<string, any>;\n  obsoletes?: string;\n  obsoleted_by?: string;\n  non_qualified?: string;\n}\n\nconst CATEGORIES = [\n  {\n    key: \"Smileys & Emotion\",\n    icon: \"😀\",\n    label: \"Smileys\",\n    color: \"bg-yellow-100 text-yellow-800\",\n  },\n  {\n    key: \"People & Body\",\n    icon: \"👋\",\n    label: \"People\",\n    color: \"bg-pink-100 text-pink-800\",\n  },\n  {\n    key: \"Animals & Nature\",\n    icon: \"🐶\",\n    label: \"Nature\",\n    color: \"bg-green-100 text-green-800\",\n  },\n  {\n    key: \"Food & Drink\",\n    icon: \"🍎\",\n    label: \"Food\",\n    color: \"bg-red-100 text-red-800\",\n  },\n  {\n    key: \"Travel & Places\",\n    icon: \"🚗\",\n    label: \"Travel\",\n    color: \"bg-blue-100 text-blue-800\",\n  },\n  {\n    key: \"Activities\",\n    icon: \"⚽\",\n    label: \"Sports\",\n    color: \"bg-orange-100 text-orange-800\",\n  },\n  {\n    key: \"Objects\",\n    icon: \"💡\",\n    label: \"Objects\",\n    color: \"bg-purple-100 text-purple-800\",\n  },\n  {\n    key: \"Symbols\",\n    icon: \"❤️\",\n    label: \"Symbols\",\n    color: \"bg-red-100 text-red-800\",\n  },\n  {\n    key: \"Flags\",\n    icon: \"🏁\",\n    label: \"Flags\",\n    color: \"bg-indigo-100 text-indigo-800\",\n  },\n];\n\nconst SKIN_TONES = [\n  { key: null, emoji: \"🏻\", label: \"Default\", color: \"bg-gray-100\" },\n  { key: \"1F3FB\", emoji: \"🏻\", label: \"Light\", color: \"bg-yellow-100\" },\n  { key: \"1F3FC\", emoji: \"🏼\", label: \"Medium-Light\", color: \"bg-orange-100\" },\n  { key: \"1F3FD\", emoji: \"🏽\", label: \"Medium\", color: \"bg-amber-100\" },\n  { key: \"1F3FE\", emoji: \"🏾\", label: \"Medium-Dark\", color: \"bg-brown-100\" },\n  { key: \"1F3FF\", emoji: \"🏿\", label: \"Dark\", color: \"bg-gray-800\" },\n];\n\nconst unicodeToEmoji = (unified: string) => {\n  return unified\n    .split(\"-\")\n    .map((hex) => String.fromCodePoint(parseInt(hex, 16)))\n    .join(\"\");\n};\n\nconst isEmojiSupported = (emoji: EmojiItem) => {\n  if (emoji.category === \"Component\") return false;\n  if (emoji.obsoleted_by) return false;\n  if (emoji.obsoletes) return false;\n\n  const hasImage =\n    emoji.has_img_apple || emoji.has_img_google || emoji.has_img_twitter;\n  if (!hasImage) return false;\n\n  const unified = emoji.unified;\n  const codepoints = unified.split(\"-\");\n\n  if (codepoints.length > 4) return false;\n\n  const hasVariationSelector = unified.includes(\"FE0F\");\n  if (hasVariationSelector && emoji.non_qualified) return false;\n\n  const isFlag = emoji.category === \"Flags\";\n  if (isFlag && codepoints.length !== 2) return false;\n\n  const isComplexSequence = codepoints.length > 2;\n  if (isComplexSequence && !isFlag) return false;\n\n  return true;\n};\n\nconst detectDeviceSupport = () => {\n  if (typeof window === \"undefined\" || typeof navigator === \"undefined\") {\n    // Default values for SSR\n    return {\n      isApple: false,\n      isAndroid: false,\n      isWindows: false,\n      isMobile: false,\n    };\n  }\n\n  const userAgent = navigator.userAgent.toLowerCase();\n  const isApple = /iphone|ipad|ipod|mac/.test(userAgent);\n  const isAndroid = /android/.test(userAgent);\n  const isWindows = /windows/.test(userAgent);\n\n  return {\n    isApple,\n    isAndroid,\n    isWindows,\n    isMobile: /mobile|android|iphone|ipad|ipod/.test(userAgent),\n  };\n};\n\nexport interface EmojiPickerProps {\n  onSelect: (emoji: string) => void;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport function EmojiPicker({\n  onSelect,\n  className,\n  disabled,\n}: EmojiPickerProps) {\n  const [open, setOpen] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [selectedSkinTone, setSelectedSkinTone] = useState<string | null>(null);\n  const [hoveredCategory, setHoveredCategory] = useState<string | null>(null);\n  const [deviceSupport, setDeviceSupport] = useState(() =>\n    detectDeviceSupport(),\n  );\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const searchRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    // Update device support on client side\n    setDeviceSupport(detectDeviceSupport());\n  }, []);\n\n  const emojis = useMemo(() => {\n    return (emojiData as EmojiItem[]).filter((emoji) => {\n      if (!isEmojiSupported(emoji)) return false;\n\n      const { isApple, isAndroid, isWindows } = deviceSupport;\n\n      if (isApple && !emoji.has_img_apple) return false;\n      if (isAndroid && !emoji.has_img_google) return false;\n      if (isWindows && !emoji.has_img_twitter) return false;\n\n      return true;\n    });\n  }, [deviceSupport]);\n\n  const categorizedEmojis = useMemo(() => {\n    const categorized: Record<string, EmojiItem[]> = {};\n    CATEGORIES.forEach((cat) => {\n      categorized[cat.key] = [];\n    });\n\n    emojis.forEach((emoji) => {\n      if (categorized[emoji.category]) {\n        categorized[emoji.category].push(emoji);\n      }\n    });\n\n    return categorized;\n  }, [emojis]);\n\n  const filteredEmojis = useMemo(() => {\n    if (!search) {\n      return categorizedEmojis;\n    }\n\n    const searchLower = search.toLowerCase();\n    const filtered: Record<string, EmojiItem[]> = {};\n\n    Object.entries(categorizedEmojis).forEach(([category, emojiList]) => {\n      const matching = emojiList.filter((emoji) => {\n        const matchesName = emoji.name.toLowerCase().includes(searchLower);\n        const matchesShortName = emoji.short_names.some((name) =>\n          name.toLowerCase().includes(searchLower),\n        );\n        return matchesName || matchesShortName;\n      });\n\n      if (matching.length > 0) {\n        filtered[category] = matching;\n      }\n    });\n\n    return filtered;\n  }, [search, categorizedEmojis]);\n\n  const handleSelect = useCallback(\n    (emoji: EmojiItem) => {\n      let emojiChar = unicodeToEmoji(emoji.unified);\n\n      if (selectedSkinTone && emoji.skin_variations?.[selectedSkinTone]) {\n        const skinVariation = emoji.skin_variations[selectedSkinTone];\n        emojiChar = unicodeToEmoji(skinVariation.unified);\n      }\n\n      onSelect(emojiChar);\n      setOpen(false);\n    },\n    [onSelect, selectedSkinTone],\n  );\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Escape\") {\n      setOpen(false);\n      return;\n    }\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"icon\"\n          aria-label=\"Open emoji picker\"\n          disabled={disabled}\n        >\n          <Smile className=\"h-5 w-5\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent\n        side=\"top\"\n        className={cn(\"w-80 p-0 z-50 overflow-hidden\", className)}\n        align=\"start\"\n        onKeyDown={handleKeyDown}\n      >\n        <div className=\"sticky top-0 bg-background border-b z-10\">\n          <div className=\"p-2 sm:p-3\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-2 sm:left-3 top-1/2 transform -translate-y-1/2 h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n              <Input\n                ref={searchRef}\n                type=\"text\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                placeholder=\"Search emoji...\"\n                className=\"pl-7 sm:pl-10 pr-6 sm:pr-8 text-xs sm:text-sm\"\n                aria-label=\"Search emoji\"\n              />\n              {search && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setSearch(\"\")}\n                  className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-5 w-5 sm:h-6 sm:w-6 p-0\"\n                >\n                  ×\n                </Button>\n              )}\n            </div>\n          </div>\n\n          <div className=\"px-2 sm:px-3 pb-2\">\n            <div className=\"flex gap-1\">\n              {SKIN_TONES.map((tone) => (\n                <Button\n                  key={tone.key || \"default\"}\n                  variant={selectedSkinTone === tone.key ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedSkinTone(tone.key)}\n                  className={cn(\n                    \"h-6 w-6 sm:h-7 sm:w-7 p-0 text-xs sm:text-sm rounded-full transition-all\",\n                    selectedSkinTone === tone.key && \"ring-2 ring-primary\",\n                  )}\n                  title={tone.label}\n                >\n                  {tone.emoji}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <ScrollArea ref={scrollRef} className=\"h-64 sm:h-80\">\n          <div className=\"p-1 sm:p-2\">\n            {Object.entries(filteredEmojis).map(([category, emojiList]) => {\n              const categoryInfo = CATEGORIES.find(\n                (cat) => cat.key === category,\n              );\n              if (!categoryInfo || emojiList.length === 0) return null;\n\n              return (\n                <div key={category} className=\"mb-4 sm:mb-6\">\n                  <div\n                    id={`category-${category}`}\n                    className={cn(\n                      \"flex items-center gap-1 sm:gap-2 mb-2 sm:mb-3 px-1 sm:px-2 py-1 rounded-lg transition-colors\",\n                      hoveredCategory === category && \"bg-muted/50\",\n                    )}\n                    onMouseEnter={() => setHoveredCategory(category)}\n                    onMouseLeave={() => setHoveredCategory(null)}\n                  >\n                    <span className=\"text-sm sm:text-lg\">\n                      {categoryInfo.icon}\n                    </span>\n                    <span className=\"font-medium text-xs sm:text-sm text-muted-foreground\">\n                      {categoryInfo.label}\n                    </span>\n                    <span className=\"text-xs text-muted-foreground ml-auto\">\n                      {emojiList.length}\n                    </span>\n                  </div>\n\n                  <div className=\"grid grid-cols-8 sm:grid-cols-9 gap-0.5 sm:gap-1\">\n                    {emojiList.map((emoji) => (\n                      <Button\n                        key={emoji.unified}\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"flex items-center justify-center rounded-lg hover:bg-accent focus:bg-accent focus:outline-none text-sm sm:text-lg h-7 w-7 sm:h-8 sm:w-8 transition-colors\"\n                        onClick={() => handleSelect(emoji)}\n                        title={emoji.name}\n                        aria-label={emoji.name}\n                      >\n                        {unicodeToEmoji(emoji.unified)}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n\n            {Object.keys(filteredEmojis).length === 0 && (\n              <div className=\"text-center text-muted-foreground py-8 sm:py-12\">\n                <Smile className=\"h-8 w-8 sm:h-12 sm:w-12 mx-auto mb-2 sm:mb-3 opacity-50\" />\n                <p className=\"text-xs sm:text-sm\">No emoji found</p>\n                <p className=\"text-xs mt-1\">Try a different search term</p>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component",
      "target": "~/components/supachat/emoji-picker.tsx"
    },
    {
      "path": "registry/supachat/hooks/use-chat.ts",
      "content": "/**\n * SupaChat - useChat Hook\n * Core chat logic for messages, rooms, and realtime updates with sync and notifications.\n */\n\n\"use client\";\n\nimport { createChatStore } from \"@/hooks/supachat/use-chat-store\";\nimport {\n  createAnonymousClient,\n  createChatChannel,\n  createChatRoom,\n  createMessage,\n  createSupabaseClient,\n  getMessages,\n} from \"@/lib/supabase/client\";\nimport type {\n  ChatMessage,\n  ChatRoom,\n  SupaChatConfig,\n} from \"@/lib/supachat/types\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n\nexport function useChat(config: SupaChatConfig) {\n  const chatStore = useMemo(\n    () => createChatStore({ localStorageKey: config.localStorageKey }),\n    [config.localStorageKey],\n  );\n  const storeMessages = chatStore((s: any) => s.messages);\n  const storeCurrentRoom = chatStore((s: any) => s.currentRoom);\n  const storeCurrentUser = chatStore((s: any) => s.user);\n  const sessionId = chatStore((s: any) => s.sessionId);\n  const setMessages = chatStore((s: any) => s.setMessages);\n  const setCurrentRoom = chatStore((s: any) => s.setCurrentRoom);\n  const setCurrentUser = chatStore((s: any) => s.setUser);\n  const addMessage = chatStore((s: any) => s.addMessage);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [hasNewMessages, setHasNewMessages] = useState(false);\n  const [lastSyncTime, setLastSyncTime] = useState<number>(Date.now());\n\n  const clientRef = useRef<ReturnType<typeof createSupabaseClient> | null>(\n    null,\n  );\n  const channelRef = useRef<any>(null);\n  const guestSessionIdRef = useRef<string | null>(null);\n  const isPageVisibleRef = useRef<boolean>(true);\n\n  useEffect(() => {\n    const { client, getGuestSessionId } = createAnonymousClient(\n      config.supabaseUrl,\n      config.supabaseAnonKey,\n      () => sessionId,\n    );\n    clientRef.current = client;\n    guestSessionIdRef.current = getGuestSessionId();\n  }, [config.supabaseUrl, config.supabaseAnonKey, sessionId]);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      const wasVisible = isPageVisibleRef.current;\n      isPageVisibleRef.current = !document.hidden;\n\n      if (wasVisible && !isPageVisibleRef.current) {\n        setLastSyncTime(Date.now());\n      } else if (!wasVisible && isPageVisibleRef.current) {\n        if (storeCurrentRoom?.id) {\n          syncNewMessages(storeCurrentRoom.id);\n        }\n      }\n    };\n\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n    return () => {\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, [storeCurrentRoom?.id]);\n\n  const syncNewMessages = useCallback(\n    async (roomId: string) => {\n      if (!clientRef.current || !roomId) return;\n\n      try {\n        const data = await getMessages(clientRef.current, roomId);\n        const transformedMessages: ChatMessage[] = data.map((msg: any) => ({\n          id: msg.id,\n          roomId: msg.room_id || \"\",\n          userId: msg.user_id || undefined,\n          guestSessionId: msg.guest_session_id || undefined,\n          content: msg.content,\n          messageType:\n            (msg.message_type as \"text\" | \"file\" | \"system\") || \"text\",\n          fileUrl: msg.file_url || undefined,\n          fileName: msg.file_name || undefined,\n          fileSize: msg.file_size || undefined,\n          isFromAdmin: msg.is_from_admin || false,\n          createdAt: msg.created_at || new Date().toISOString(),\n        }));\n\n        const newMessages = transformedMessages.filter(\n          (msg) => new Date(msg.createdAt).getTime() > lastSyncTime,\n        );\n\n        if (newMessages.length > 0) {\n          setHasNewMessages(true);\n        }\n\n        setMessages(transformedMessages);\n        setLastSyncTime(Date.now());\n      } catch (err) {\n        console.error(\"Failed to sync messages:\", err);\n      }\n    },\n    [lastSyncTime, setMessages],\n  );\n\n  const loadMessages = useCallback(\n    async (roomId: string) => {\n      if (!clientRef.current || !roomId) return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const data = await getMessages(clientRef.current, roomId);\n        const transformedMessages: ChatMessage[] = data.map((msg: any) => ({\n          id: msg.id,\n          roomId: msg.room_id || \"\",\n          userId: msg.user_id || undefined,\n          guestSessionId: msg.guest_session_id || undefined,\n          content: msg.content,\n          messageType:\n            (msg.message_type as \"text\" | \"file\" | \"system\") || \"text\",\n          fileUrl: msg.file_url || undefined,\n          fileName: msg.file_name || undefined,\n          fileSize: msg.file_size || undefined,\n          isFromAdmin: msg.is_from_admin || false,\n          createdAt: msg.created_at || new Date().toISOString(),\n        }));\n        setMessages(transformedMessages);\n        setLastSyncTime(Date.now());\n      } catch (err) {\n        setError(\n          err instanceof Error ? err.message : \"Failed to load messages\",\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [setMessages],\n  );\n\n  const sendMessage = useCallback(\n    async (content: string, file?: File) => {\n      if (!clientRef.current || !storeCurrentRoom?.id || !content.trim())\n        return;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        let fileUrl: string | undefined;\n        let fileName: string | undefined;\n        let fileSize: number | undefined;\n\n        if (file && config.enableUploads) {\n          const uploadResult = await uploadFile(clientRef.current!, file);\n          fileUrl = uploadResult.url;\n          fileName = file.name;\n          fileSize = file.size;\n        }\n\n        const messageData = await createMessage(\n          clientRef.current!,\n          storeCurrentRoom.id,\n          content,\n          {\n            userId: storeCurrentUser?.userId,\n            guestSessionId: guestSessionIdRef.current || undefined,\n            isFromAdmin: storeCurrentUser?.isAdmin || false,\n            messageType: file ? \"file\" : \"text\",\n            fileUrl,\n            fileName,\n            fileSize,\n          },\n        );\n\n        const newMessage: ChatMessage = {\n          id: messageData.id,\n          roomId: messageData.room_id || \"\",\n          userId: messageData.user_id || undefined,\n          guestSessionId: messageData.guest_session_id || undefined,\n          content: messageData.content,\n          messageType:\n            (messageData.message_type as \"text\" | \"file\" | \"system\") || \"text\",\n          fileUrl: messageData.file_url || undefined,\n          fileName: messageData.file_name || undefined,\n          fileSize: messageData.file_size || undefined,\n          isFromAdmin: messageData.is_from_admin || false,\n          createdAt: messageData.created_at || new Date().toISOString(),\n        };\n\n        addMessage(newMessage);\n        setHasNewMessages(false);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : \"Failed to send message\");\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [storeCurrentRoom?.id, storeCurrentUser, config.enableUploads, addMessage],\n  );\n\n  const createRoom = useCallback(\n    async (name?: string): Promise<ChatRoom> => {\n      if (!clientRef.current) throw new Error(\"Client not initialized\");\n\n      try {\n        const roomData = await createChatRoom(\n          clientRef.current,\n          true,\n          guestSessionIdRef.current || undefined,\n          name,\n        );\n\n        const room: ChatRoom = {\n          id: roomData.id,\n          name: roomData.name || undefined,\n          isGuestRoom: roomData.is_guest_room || false,\n          guestSessionId: roomData.guest_session_id || undefined,\n          createdAt: roomData.created_at || new Date().toISOString(),\n          updatedAt: roomData.updated_at || new Date().toISOString(),\n          unreadCount: 0,\n        };\n\n        setCurrentRoom(room);\n        await loadMessages(room.id);\n\n        if (channelRef.current) {\n          channelRef.current.unsubscribe();\n        }\n\n        channelRef.current = createChatChannel(clientRef.current, room.id);\n        channelRef.current.subscribe();\n\n        return room;\n      } catch (err) {\n        throw new Error(\n          err instanceof Error ? err.message : \"Failed to create room\",\n        );\n      }\n    },\n    [loadMessages, setCurrentRoom],\n  );\n\n  const joinRoom = useCallback(\n    async (roomId: string) => {\n      if (!clientRef.current) throw new Error(\"Client not initialized\");\n\n      try {\n        await loadMessages(roomId);\n\n        if (channelRef.current) {\n          channelRef.current.unsubscribe();\n        }\n\n        channelRef.current = createChatChannel(clientRef.current, roomId);\n        channelRef.current.subscribe();\n      } catch (err) {\n        throw new Error(\n          err instanceof Error ? err.message : \"Failed to join room\",\n        );\n      }\n    },\n    [loadMessages],\n  );\n\n  const markAsRead = useCallback(async () => {\n    setHasNewMessages(false);\n  }, []);\n\n  const setTyping = useCallback(async (isTyping: boolean) => {}, []);\n\n  useEffect(() => {\n    return () => {\n      if (channelRef.current) {\n        channelRef.current.unsubscribe();\n      }\n    };\n  }, []);\n\n  return {\n    config,\n    currentUser: storeCurrentUser,\n    currentRoom: storeCurrentRoom,\n    messages: storeMessages,\n    isLoading,\n    error,\n    hasNewMessages,\n    sendMessage,\n    markAsRead,\n    setTyping,\n    createRoom,\n    joinRoom,\n    syncNewMessages,\n  };\n}\n\nasync function uploadFile(\n  client: ReturnType<typeof createSupabaseClient>,\n  file: File,\n): Promise<{ url: string; path: string }> {\n  const fileExt = file.name.split(\".\").pop();\n  const fileName = `${crypto.randomUUID()}.${fileExt}`;\n  const filePath = `${Date.now()}/${fileName}`;\n\n  const { data, error } = await client.storage\n    .from(\"chat-files\")\n    .upload(filePath, file, {\n      cacheControl: \"3600\",\n      upsert: false,\n    });\n\n  if (error) {\n    throw new Error(`Upload failed: ${error.message}`);\n  }\n\n  const {\n    data: { publicUrl },\n  } = client.storage.from(\"chat-files\").getPublicUrl(filePath);\n\n  return {\n    url: publicUrl,\n    path: filePath,\n  };\n}\n",
      "type": "registry:hook",
      "target": "~/hooks/supachat/use-chat.ts"
    },
    {
      "path": "registry/supachat/hooks/use-chat-status.ts",
      "content": "/**\n * SupaChat - useChatStatus Hook\n * Manages typing indicators and user presence for chat rooms.\n */\n\n\"use client\";\n\nimport {\n  createPresenceChannel,\n  createSupabaseClient,\n} from \"@/lib/supabase/client\";\nimport type { SupaChatConfig } from \"@/lib/supachat/types\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nexport function useChatStatus(config: SupaChatConfig) {\n  const [isTyping, setIsTyping] = useState(false);\n  const [isOnline, setIsOnline] = useState(false);\n  const [lastSeen, setLastSeen] = useState<string>(new Date().toISOString());\n  const [typingUsers, setTypingUsers] = useState<Set<string>>(new Set());\n\n  const channelRef = useRef<any>(null);\n  const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (!config.enablePresence) return;\n    const client = createSupabaseClient(\n      config.supabaseUrl,\n      config.supabaseAnonKey,\n    );\n    channelRef.current = createPresenceChannel(client, \"presence-channel\");\n    channelRef.current.on(\"presence\", { event: \"sync\" }, () => {\n      const presence = channelRef.current.presenceState();\n      const onlineUsers = Object.keys(presence);\n      setIsOnline(onlineUsers.length > 0);\n    });\n    channelRef.current.on(\"presence\", { event: \"join\" }, () => {\n      setLastSeen(new Date().toISOString());\n      setIsOnline(true);\n    });\n    channelRef.current.on(\"presence\", { event: \"leave\" }, () => {\n      setLastSeen(new Date().toISOString());\n    });\n    channelRef.current.subscribe(async (status: string) => {\n      if (status === \"SUBSCRIBED\") {\n        await channelRef.current.track({\n          user_id: \"guest\",\n          online_at: new Date().toISOString(),\n        });\n      }\n    });\n    return () => {\n      if (channelRef.current) {\n        channelRef.current.unsubscribe();\n      }\n    };\n  }, [config.supabaseUrl, config.supabaseAnonKey, config.enablePresence]);\n\n  const setTyping = useCallback(\n    async (isTyping: boolean) => {\n      if (!channelRef.current || !config.enablePresence) return;\n      setIsTyping(isTyping);\n      if (isTyping) {\n        if (typingTimeoutRef.current) {\n          clearTimeout(typingTimeoutRef.current);\n        }\n        await channelRef.current.track({\n          user_id: \"guest\",\n          typing: true,\n          typing_at: new Date().toISOString(),\n        });\n        typingTimeoutRef.current = setTimeout(async () => {\n          await channelRef.current.track({\n            user_id: \"guest\",\n            typing: false,\n          });\n          setIsTyping(false);\n        }, 3000);\n      } else {\n        if (typingTimeoutRef.current) {\n          clearTimeout(typingTimeoutRef.current);\n          typingTimeoutRef.current = null;\n        }\n        await channelRef.current.track({\n          user_id: \"guest\",\n          typing: false,\n        });\n      }\n    },\n    [config.enablePresence],\n  );\n\n  const updateLastSeen = useCallback(async () => {\n    if (!channelRef.current || !config.enablePresence) return;\n    const now = new Date().toISOString();\n    setLastSeen(now);\n    await channelRef.current.track({\n      user_id: \"guest\",\n      last_seen: now,\n    });\n  }, [config.enablePresence]);\n\n  useEffect(() => {\n    if (!channelRef.current || !config.enablePresence) return;\n    channelRef.current.on(\"presence\", { event: \"sync\" }, () => {\n      const presence = channelRef.current.presenceState();\n      const typingUsersSet = new Set<string>();\n      Object.entries(presence).forEach(([key, presences]: [string, any]) => {\n        const userPresence = Array.isArray(presences)\n          ? presences[0]\n          : presences;\n        if (userPresence?.typing && userPresence.user_id !== \"guest\") {\n          typingUsersSet.add(userPresence.user_id);\n        }\n      });\n      setTypingUsers(typingUsersSet);\n    });\n  }, [config.enablePresence]);\n\n  useEffect(() => {\n    if (!config.enablePresence) return;\n    const interval = setInterval(() => {\n      updateLastSeen();\n    }, 30000);\n    return () => clearInterval(interval);\n  }, [updateLastSeen, config.enablePresence]);\n\n  useEffect(() => {\n    return () => {\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n      if (channelRef.current) {\n        channelRef.current.unsubscribe();\n      }\n    };\n  }, []);\n\n  return {\n    isTyping,\n    isOnline,\n    lastSeen,\n    typingUsers: Array.from(typingUsers),\n    setTyping,\n    updateLastSeen,\n  };\n}\n",
      "type": "registry:hook",
      "target": "~/hooks/supachat/use-chat-status.ts"
    },
    {
      "path": "registry/supachat/hooks/use-admin.ts",
      "content": "/**\n * SupaChat - useAdmin Hook\n * Admin operations, rooms, and messages management for SupaChat.\n */\n\n\"use client\";\n\nimport { createChatStore } from \"@/hooks/supachat/use-chat-store\";\nimport {\n  createMessage,\n  createSupabaseClient,\n  getChatRooms,\n  getMessages,\n} from \"@/lib/supabase/client\";\nimport type {\n  ChatMessage,\n  ChatRoom,\n  SupaChatConfig,\n} from \"@/lib/supachat/types\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n\nexport function useAdmin(config: SupaChatConfig) {\n  const chatStore = useMemo(\n    () => createChatStore({ localStorageKey: config.localStorageKey }),\n    [config.localStorageKey],\n  );\n  const [rooms, setRooms] = useState<ChatRoom[]>([]);\n  const [selectedRoom, setSelectedRoom] = useState<ChatRoom | null>(null);\n  const [roomMessages, setRoomMessages] = useState<\n    Record<string, ChatMessage[]>\n  >({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const clientRef = useRef<ReturnType<typeof createSupabaseClient> | null>(\n    null,\n  );\n\n  useEffect(() => {\n    clientRef.current = createSupabaseClient(\n      config.supabaseUrl,\n      config.supabaseAnonKey,\n    );\n  }, [config.supabaseUrl, config.supabaseAnonKey]);\n\n  const loadRooms = useCallback(async () => {\n    if (!clientRef.current) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const data = await getChatRooms(clientRef.current);\n      const transformedRooms: ChatRoom[] = data.map((room: any) => ({\n        id: room.id,\n        name: room.name || undefined,\n        isGuestRoom: room.is_guest_room || false,\n        guestSessionId: room.guest_session_id || undefined,\n        createdAt: room.created_at || new Date().toISOString(),\n        updatedAt: room.updated_at || new Date().toISOString(),\n        lastMessage: room.messages?.[0]\n          ? {\n              id: room.messages[0].id,\n              roomId: room.messages[0].room_id || \"\",\n              userId: room.messages[0].user_id || undefined,\n              guestSessionId: room.messages[0].guest_session_id || undefined,\n              content: room.messages[0].content,\n              messageType:\n                (room.messages[0].message_type as \"text\" | \"file\" | \"system\") ||\n                \"text\",\n              fileUrl: room.messages[0].file_url || undefined,\n              fileName: room.messages[0].file_name || undefined,\n              fileSize: room.messages[0].file_size || undefined,\n              isFromAdmin: room.messages[0].is_from_admin || false,\n              createdAt:\n                room.messages[0].created_at || new Date().toISOString(),\n            }\n          : undefined,\n        unreadCount: room.unread_count || 0,\n      }));\n      setRooms(transformedRooms);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Failed to load rooms\");\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const loadRoomMessages = useCallback(async (roomId: string) => {\n    if (!clientRef.current || !roomId) return;\n\n    try {\n      const data = await getMessages(clientRef.current, roomId);\n      const transformedMessages: ChatMessage[] = data.map((msg: any) => ({\n        id: msg.id,\n        roomId: msg.room_id || \"\",\n        userId: msg.user_id || undefined,\n        guestSessionId: msg.guest_session_id || undefined,\n        content: msg.content,\n        messageType: (msg.message_type as \"text\" | \"file\" | \"system\") || \"text\",\n        fileUrl: msg.file_url || undefined,\n        fileName: msg.file_name || undefined,\n        fileSize: msg.file_size || undefined,\n        isFromAdmin: msg.is_from_admin || false,\n        createdAt: msg.created_at || new Date().toISOString(),\n      }));\n      setRoomMessages((prev) => ({\n        ...prev,\n        [roomId]: transformedMessages,\n      }));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Failed to load messages\");\n    }\n  }, []);\n\n  const sendAdminMessage = useCallback(\n    async (roomId: string, content: string) => {\n      if (!clientRef.current || !roomId || !content.trim()) return;\n\n      try {\n        const messageData = await createMessage(\n          clientRef.current,\n          roomId,\n          content,\n          {\n            isFromAdmin: true,\n            messageType: \"text\",\n          },\n        );\n\n        const newMessage: ChatMessage = {\n          id: messageData.id,\n          roomId: messageData.room_id || \"\",\n          userId: messageData.user_id || undefined,\n          guestSessionId: messageData.guest_session_id || undefined,\n          content: messageData.content,\n          messageType:\n            (messageData.message_type as \"text\" | \"file\" | \"system\") || \"text\",\n          fileUrl: messageData.file_url || undefined,\n          fileName: messageData.file_name || undefined,\n          fileSize: messageData.file_size || undefined,\n          isFromAdmin: messageData.is_from_admin || false,\n          createdAt: messageData.created_at || new Date().toISOString(),\n        };\n\n        setRoomMessages((prev) => ({\n          ...prev,\n          [roomId]: [...(prev[roomId] || []), newMessage],\n        }));\n\n        setRooms((prev) =>\n          prev.map((room) =>\n            room.id === roomId\n              ? {\n                  ...room,\n                  lastMessage: newMessage,\n                  updatedAt: new Date().toISOString(),\n                }\n              : room,\n          ),\n        );\n      } catch (err) {\n        setError(err instanceof Error ? err.message : \"Failed to send message\");\n      }\n    },\n    [],\n  );\n\n  const deleteRoom = useCallback(\n    async (roomId: string) => {\n      if (!clientRef.current || !roomId) return;\n\n      try {\n        const { error } = await clientRef.current\n          .from(\"chat_rooms\")\n          .delete()\n          .eq(\"id\", roomId);\n\n        if (error) throw error;\n\n        setRooms((prev) => prev.filter((room) => room.id !== roomId));\n        setRoomMessages((prev) => {\n          const newMessages = { ...prev };\n          delete newMessages[roomId];\n          return newMessages;\n        });\n\n        if (selectedRoom?.id === roomId) {\n          setSelectedRoom(null);\n        }\n      } catch (err) {\n        setError(err instanceof Error ? err.message : \"Failed to delete room\");\n      }\n    },\n    [selectedRoom?.id],\n  );\n\n  const markAsRead = useCallback(async (roomId: string) => {\n    if (!clientRef.current || !roomId) return;\n\n    try {\n      const { error } = await clientRef.current.from(\"chat_users\").upsert({\n        user_id: \"admin\",\n        last_seen: new Date().toISOString(),\n      });\n\n      if (error) throw error;\n\n      setRooms((prev) =>\n        prev.map((room) =>\n          room.id === roomId ? { ...room, unreadCount: 0 } : room,\n        ),\n      );\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Failed to mark as read\");\n    }\n  }, []);\n\n  const assignAdmin = useCallback(async (roomId: string, adminId: string) => {\n    if (!clientRef.current || !roomId || !adminId) return;\n\n    try {\n      const { error } = await clientRef.current\n        .from(\"chat_rooms\")\n        .update({ assigned_admin_id: adminId })\n        .eq(\"id\", roomId);\n\n      if (error) throw error;\n\n      setRooms((prev) =>\n        prev.map((room) =>\n          room.id === roomId ? { ...room, assignedAdminId: adminId } : room,\n        ),\n      );\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Failed to assign admin\");\n    }\n  }, []);\n\n  const getRoomStats = useCallback(\n    (roomId: string) => {\n      const messages = roomMessages[roomId] || [];\n      const totalMessages = messages.length;\n      const adminMessages = messages.filter((m) => m.isFromAdmin).length;\n      const userMessages = totalMessages - adminMessages;\n      const lastActivity =\n        messages.length > 0 ? messages[messages.length - 1].createdAt : null;\n\n      return {\n        totalMessages,\n        adminMessages,\n        userMessages,\n        lastActivity,\n      };\n    },\n    [roomMessages],\n  );\n\n  useEffect(() => {\n    loadRooms();\n  }, [loadRooms]);\n\n  useEffect(() => {\n    if (!clientRef.current) return;\n\n    const roomsChannel = clientRef.current\n      .channel(\"admin-rooms\")\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"*\",\n          schema: \"public\",\n          table: \"chat_rooms\",\n        },\n        (payload) => {\n          if (payload.eventType === \"INSERT\") {\n            const newRoom: ChatRoom = {\n              id: payload.new.id,\n              name: payload.new.name || undefined,\n              isGuestRoom: payload.new.is_guest_room || false,\n              guestSessionId: payload.new.guest_session_id || undefined,\n              createdAt: payload.new.created_at || new Date().toISOString(),\n              updatedAt: payload.new.updated_at || new Date().toISOString(),\n              unreadCount: 0,\n            };\n            setRooms((prev) => [newRoom, ...prev]);\n          } else if (payload.eventType === \"UPDATE\") {\n            const updatedRoom: ChatRoom = {\n              id: payload.new.id,\n              name: payload.new.name || undefined,\n              isGuestRoom: payload.new.is_guest_room || false,\n              guestSessionId: payload.new.guest_session_id || undefined,\n              createdAt: payload.new.created_at || new Date().toISOString(),\n              updatedAt: payload.new.updated_at || new Date().toISOString(),\n              unreadCount: 0,\n            };\n            setRooms((prev) =>\n              prev.map((room) =>\n                room.id === updatedRoom.id ? updatedRoom : room,\n              ),\n            );\n          } else if (payload.eventType === \"DELETE\") {\n            setRooms((prev) =>\n              prev.filter((room) => room.id !== payload.old.id),\n            );\n          }\n        },\n      )\n      .subscribe();\n\n    const messagesChannel = clientRef.current\n      .channel(\"admin-messages\")\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"*\",\n          schema: \"public\",\n          table: \"messages\",\n        },\n        (payload) => {\n          if (payload.eventType === \"INSERT\") {\n            const newMessage: ChatMessage = {\n              id: payload.new.id,\n              roomId: payload.new.room_id || \"\",\n              userId: payload.new.user_id || undefined,\n              guestSessionId: payload.new.guest_session_id || undefined,\n              content: payload.new.content,\n              messageType:\n                (payload.new.message_type as \"text\" | \"file\" | \"system\") ||\n                \"text\",\n              fileUrl: payload.new.file_url || undefined,\n              fileName: payload.new.file_name || undefined,\n              fileSize: payload.new.file_size || undefined,\n              isFromAdmin: payload.new.is_from_admin || false,\n              createdAt: payload.new.created_at || new Date().toISOString(),\n            };\n            setRoomMessages((prev) => ({\n              ...prev,\n              [newMessage.roomId]: [\n                ...(prev[newMessage.roomId] || []),\n                newMessage,\n              ],\n            }));\n          }\n        },\n      )\n      .subscribe();\n\n    return () => {\n      roomsChannel.unsubscribe();\n      messagesChannel.unsubscribe();\n    };\n  }, []);\n\n  return {\n    rooms,\n    selectedRoom,\n    roomMessages,\n    isLoading,\n    error,\n    sendAdminMessage,\n    deleteRoom,\n    markAsRead,\n    assignAdmin,\n    getRoomStats,\n    loadRooms,\n    loadRoomMessages,\n    setSelectedRoom,\n  };\n}\n",
      "type": "registry:hook",
      "target": "~/hooks/supachat/use-admin.ts"
    },
    {
      "path": "registry/supachat/lib/types.ts",
      "content": "/**\n * SupaChat - TypeScript Types\n * Complete type definitions for the chat system with avatar support.\n */\n\nexport interface ChatMessage {\n  id: string;\n  roomId: string;\n  userId?: string;\n  guestSessionId?: string;\n  content: string;\n  messageType: \"text\" | \"file\" | \"system\";\n  fileUrl?: string;\n  fileName?: string;\n  fileSize?: number;\n  isFromAdmin: boolean;\n  createdAt: string;\n}\n\nexport interface ChatRoom {\n  id: string;\n  name?: string;\n  isGuestRoom: boolean;\n  guestSessionId?: string;\n  createdAt: string;\n  updatedAt: string;\n  lastMessage?: ChatMessage;\n  unreadCount: number;\n}\n\nexport interface ChatUser {\n  id: string;\n  userId?: string;\n  guestSessionId?: string;\n  name?: string;\n  email?: string;\n  isAdmin: boolean;\n  assignedAdminId?: string;\n  lastSeen: string;\n  createdAt: string;\n}\n\nexport interface AvatarConfig {\n  adminAvatar: string;\n  userAvatar: string;\n}\n\nexport interface AvatarProps {\n  src?: string;\n  fallback: string;\n  size?: \"small\" | \"medium\" | \"large\";\n  className?: string;\n}\n\nexport interface ChatStatus {\n  isTyping: boolean;\n  isOnline: boolean;\n  lastSeen: string;\n}\n\nexport interface ButtonAction {\n  label: string;\n  value: string;\n  callback?: (value: string) => void;\n}\n\nexport interface WelcomeMessage {\n  content: string;\n  delay?: number;\n  isFromAdmin: boolean;\n  buttons?: ButtonAction[];\n}\n\nexport interface SupaChatConfig {\n  supabaseUrl: string;\n  supabaseAnonKey: string;\n  localStorageKey: string;\n  welcomeMessages?: WelcomeMessage[];\n  enableUploads?: boolean;\n  enableEmojis?: boolean;\n  agentTypingDelay?: number;\n  inputLockedAfterSend?: boolean;\n  adminRole?: string;\n  theme?: \"light\" | \"dark\" | \"system\";\n  maxMessageLength?: number;\n  enablePresence?: boolean;\n  autoAssignAdmin?: boolean;\n  guestSessionExpiry?: number;\n  chatWidgetPosition?:\n    | \"bottom-right\"\n    | \"bottom-left\"\n    | \"top-right\"\n    | \"top-left\";\n  chatWidgetSize?: {\n    width: number;\n    height: number;\n  };\n  maxFileSize?: number;\n  allowedFileTypes?: string[];\n  adminAvatar?: string;\n  userAvatar?: string;\n}\n\nexport interface SupaChatContextType {\n  config: SupaChatConfig;\n  currentUser: ChatUser | null;\n  currentRoom: ChatRoom | null;\n  messages: ChatMessage[];\n  isLoading: boolean;\n  error: string | null;\n  sendMessage: (content: string, file?: File) => Promise<void>;\n  markAsRead: () => Promise<void>;\n  setTyping: (isTyping: boolean) => Promise<void>;\n  createRoom: (name?: string) => Promise<ChatRoom>;\n  joinRoom: (roomId: string) => Promise<void>;\n}\n\nexport interface AdminPanelProps {\n  rooms: ChatRoom[];\n  onRoomSelect: (room: ChatRoom) => void;\n  onAssignAdmin: (roomId: string, adminId: string) => Promise<void>;\n  onDeleteRoom: (roomId: string) => Promise<void>;\n  onMarkAsRead: (roomId: string) => Promise<void>;\n  className?: string;\n}\n\nexport interface ChatWidgetProps {\n  position?: \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\";\n  size?: { width: number; height: number };\n  className?: string;\n  showOnLoad?: boolean;\n  customWelcomeMessage?: string;\n  title?: string;\n  subtitle?: string;\n}\n\nexport interface MessageBubbleProps {\n  message: ChatMessage;\n  isOwnMessage?: boolean;\n  showAvatar?: boolean;\n  showTimestamp?: boolean;\n  className?: string;\n  buttons?: ButtonAction[];\n  onButtonClick?: (action: ButtonAction) => void;\n}\n\nexport interface TypingIndicatorProps {\n  isTyping?: boolean;\n  showAvatar?: boolean;\n  className?: string;\n}\n\nexport interface FileUploadProps {\n  onFileSelect: (file: File) => Promise<void>;\n  maxSize?: number;\n  allowedTypes?: string[];\n  className?: string;\n  disabled?: boolean;\n}\n\nexport interface ChatStoreState {\n  sessionId: string | null;\n  user: ChatUser | null;\n  currentRoom: ChatRoom | null;\n  messages: ChatMessage[];\n  unreadCount: number;\n  inputLocked: boolean;\n  setSessionId: (id: string) => void;\n  setUser: (user: ChatUser | null) => void;\n  setCurrentRoom: (room: ChatRoom | null) => void;\n  setMessages: (messages: ChatMessage[]) => void;\n  addMessage: (message: ChatMessage) => void;\n  setUnreadCount: (count: number) => void;\n  setInputLocked: (locked: boolean) => void;\n  reset: () => void;\n}\n\nexport interface Database {\n  public: {\n    Tables: {\n      chat_rooms: {\n        Row: {\n          id: string;\n          name: string | null;\n          is_guest_room: boolean | null;\n          guest_session_id: string | null;\n          created_at: string | null;\n          updated_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          name?: string | null;\n          is_guest_room?: boolean | null;\n          guest_session_id?: string | null;\n          created_at?: string | null;\n          updated_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          name?: string | null;\n          is_guest_room?: boolean | null;\n          guest_session_id?: string | null;\n          created_at?: string | null;\n          updated_at?: string | null;\n        };\n      };\n      messages: {\n        Row: {\n          id: string;\n          room_id: string | null;\n          user_id: string | null;\n          guest_session_id: string | null;\n          content: string;\n          message_type: string | null;\n          file_url: string | null;\n          file_name: string | null;\n          file_size: number | null;\n          is_from_admin: boolean | null;\n          created_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          room_id?: string | null;\n          user_id?: string | null;\n          guest_session_id?: string | null;\n          content: string;\n          message_type?: string | null;\n          file_url?: string | null;\n          file_name?: string | null;\n          file_size?: number | null;\n          is_from_admin?: boolean | null;\n          created_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          room_id?: string | null;\n          user_id?: string | null;\n          guest_session_id?: string | null;\n          content?: string;\n          message_type?: string | null;\n          file_url?: string | null;\n          file_name?: string | null;\n          file_size?: number | null;\n          is_from_admin?: boolean | null;\n          created_at?: string | null;\n        };\n      };\n      chat_users: {\n        Row: {\n          id: string;\n          user_id: string | null;\n          guest_session_id: string | null;\n          name: string | null;\n          email: string | null;\n          is_admin: boolean | null;\n          assigned_admin_id: string | null;\n          last_seen: string | null;\n          created_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          user_id?: string | null;\n          guest_session_id?: string | null;\n          name?: string | null;\n          email?: string | null;\n          is_admin?: boolean | null;\n          assigned_admin_id?: string | null;\n          last_seen?: string | null;\n          created_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          user_id?: string | null;\n          guest_session_id?: string | null;\n          name?: string | null;\n          email?: string | null;\n          is_admin?: boolean | null;\n          assigned_admin_id?: string | null;\n          last_seen?: string | null;\n          created_at?: string | null;\n        };\n      };\n    };\n  };\n}\n",
      "type": "registry:lib",
      "target": "~/lib/supachat/types.ts"
    },
    {
      "path": "registry/supachat/lib/config.ts",
      "content": "/**\n * SupaChat Configuration\n * Complete configuration for the chat system with avatar support.\n */\n\nimport { z } from \"zod\";\n\nexport const defaultConfig: SupaChatConfig = {\n  supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n  localStorageKey: \"supachat-store\",\n\n  // Avatar Configuration\n  adminAvatar: \"/admin-avatar.png\",\n  userAvatar: \"/user-avatar.png\",\n\n  // Widget Configuration\n  chatWidgetPosition: \"bottom-right\",\n  chatWidgetSize: {\n    width: 400,\n    height: 650,\n  },\n\n  // Message Configuration\n  welcomeMessages: [\n    {\n      content:\n        \"👋 Welcome to SupaChat! A configurable chat system built with Next.js, Supabase, and ShadCN. This is open-source software - feel free to contribute, report bugs, or build your own version!\",\n      delay: 800,\n      isFromAdmin: true,\n    },\n    {\n      content:\n        \"Check out the GitHub repo for issues, discussions, and contribution guidelines!\",\n      delay: 500,\n      isFromAdmin: true,\n      buttons: [\n        {\n          label: \"🐙 GitHub Repo\",\n          value: \"https://github.com/BankkRoll/SupaChat\",\n          callback: () => {\n            if (typeof window !== \"undefined\") {\n              window.open(\"https://github.com/BankkRoll/SupaChat\", \"_blank\");\n            }\n          },\n        },\n      ],\n    },\n  ],\n  maxMessageLength: 2000,\n  agentTypingDelay: 800,\n  inputLockedAfterSend: true,\n\n  // Feature Configuration\n  enableUploads: true,\n  enableEmojis: true,\n  enablePresence: true,\n  autoAssignAdmin: true,\n\n  // File Upload Configuration\n  maxFileSize: 10 * 1024 * 1024,\n  allowedFileTypes: [\"image/*\", \"application/pdf\", \"text/*\"],\n\n  // Admin Configuration\n  adminRole: \"admin\",\n\n  // Theme Configuration\n  theme: \"system\",\n\n  // Session Configuration\n  guestSessionExpiry: 24 * 60 * 60 * 1000,\n};\n\nexport const ButtonActionSchema = z.object({\n  label: z.string(),\n  value: z.string(),\n  callback: z.function().args(z.string()).returns(z.void()).optional(),\n});\n\nexport const WelcomeMessageSchema = z.object({\n  content: z.string(),\n  delay: z.number().optional(),\n  isFromAdmin: z.boolean(),\n  buttons: z.array(ButtonActionSchema).optional(),\n});\n\nexport const SupaChatConfigSchema = z.object({\n  supabaseUrl: z.string().url(),\n  supabaseAnonKey: z.string(),\n  localStorageKey: z.string().default(\"supachat-store\"),\n\n  adminAvatar: z.string().default(\"/admin-avatar.png\"),\n  userAvatar: z.string().default(\"/user-avatar.png\"),\n\n  chatWidgetPosition: z\n    .enum([\"bottom-right\", \"bottom-left\", \"top-right\", \"top-left\"])\n    .default(\"bottom-right\"),\n  chatWidgetSize: z\n    .object({\n      width: z.number().default(400),\n      height: z.number().default(650),\n    })\n    .optional(),\n\n  welcomeMessages: z.array(WelcomeMessageSchema).optional(),\n  maxMessageLength: z.number().default(2000),\n  agentTypingDelay: z.number().min(0).max(5000).default(800),\n  inputLockedAfterSend: z.boolean().default(true),\n\n  enableUploads: z.boolean().default(true),\n  enableEmojis: z.boolean().default(true),\n  enablePresence: z.boolean().default(true),\n  autoAssignAdmin: z.boolean().default(true),\n\n  maxFileSize: z.number().default(10 * 1024 * 1024),\n  allowedFileTypes: z\n    .array(z.string())\n    .default([\"image/*\", \"application/pdf\", \"text/*\"]),\n\n  adminRole: z.string().default(\"admin\"),\n\n  theme: z.enum([\"light\", \"dark\", \"system\"]).default(\"system\"),\n\n  guestSessionExpiry: z.number().default(24 * 60 * 60 * 1000),\n});\n\nexport type SupaChatConfig = z.infer<typeof SupaChatConfigSchema>;\nexport type ButtonAction = z.infer<typeof ButtonActionSchema>;\nexport type WelcomeMessage = z.infer<typeof WelcomeMessageSchema>;\n\nexport function validateConfig(\n  config: Partial<SupaChatConfig>,\n): SupaChatConfig {\n  return SupaChatConfigSchema.parse({\n    ...defaultConfig,\n    ...config,\n  });\n}\n\nexport function getConfigFromEnv(): SupaChatConfig {\n  return validateConfig({\n    supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,\n    supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n  });\n}\n",
      "type": "registry:lib",
      "target": "~/lib/supachat/config.ts"
    },
    {
      "path": "registry/supachat/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": "~/lib/utils.ts"
    },
    {
      "path": "registry/supachat/lib/supabase/client.ts",
      "content": "/**\n * SupaChat - Supabase Client Utilities\n * Client-side Supabase configuration and helpers for chat.\n */\n\nimport type { Database } from \"@/lib/supachat/types\";\nimport { createBrowserClient } from \"@supabase/ssr\";\n\nexport function createSupabaseClient(\n  supabaseUrl: string,\n  supabaseAnonKey: string,\n) {\n  return createBrowserClient<Database>(supabaseUrl, supabaseAnonKey, {\n    auth: {\n      persistSession: true,\n      autoRefreshToken: true,\n      detectSessionInUrl: true,\n    },\n    realtime: {\n      params: {\n        eventsPerSecond: 10,\n      },\n    },\n    global: {\n      headers: {\n        \"X-Client-Info\": \"supachat-browser\",\n      },\n    },\n  });\n}\n\nexport function createAnonymousClient(\n  supabaseUrl: string,\n  supabaseAnonKey: string,\n  getSessionId: () => string | null,\n) {\n  const client = createSupabaseClient(supabaseUrl, supabaseAnonKey);\n\n  const getGuestSessionId = () => {\n    return getSessionId();\n  };\n\n  return {\n    client,\n    getGuestSessionId,\n    isAuthenticated: async () => {\n      const {\n        data: { session },\n      } = await client.auth.getSession();\n      return !!session;\n    },\n    getCurrentUserId: async () => {\n      const {\n        data: { user },\n      } = await client.auth.getUser();\n      return user?.id;\n    },\n  };\n}\n\nexport function createChatChannel(\n  client: ReturnType<typeof createSupabaseClient>,\n  roomId: string,\n) {\n  return client\n    .channel(`chat:${roomId}`)\n    .on(\n      \"postgres_changes\",\n      {\n        event: \"*\",\n        schema: \"public\",\n        table: \"messages\",\n        filter: `room_id=eq.${roomId}`,\n      },\n      (payload) => {\n        console.log(\"Message change:\", payload);\n      },\n    )\n    .on(\n      \"postgres_changes\",\n      {\n        event: \"*\",\n        schema: \"public\",\n        table: \"chat_rooms\",\n        filter: `id=eq.${roomId}`,\n      },\n      (payload) => {\n        console.log(\"Room change:\", payload);\n      },\n    );\n}\n\nexport function createPresenceChannel(\n  client: ReturnType<typeof createSupabaseClient>,\n  roomId: string,\n) {\n  return client\n    .channel(`presence:${roomId}`)\n    .on(\"presence\", { event: \"sync\" }, () => {\n      console.log(\"Presence synced\");\n    })\n    .on(\"presence\", { event: \"join\" }, ({ key, newPresences }) => {\n      console.log(\"User joined:\", key, newPresences);\n    })\n    .on(\"presence\", { event: \"leave\" }, ({ key, leftPresences }) => {\n      console.log(\"User left:\", key, leftPresences);\n    });\n}\n\nexport async function uploadFile(\n  client: ReturnType<typeof createSupabaseClient>,\n  file: File,\n  bucketName: string = \"chat-files\",\n): Promise<{ url: string; path: string }> {\n  const fileExt = file.name.split(\".\").pop();\n  const fileName = `${crypto.randomUUID()}.${fileExt}`;\n  const filePath = `${Date.now()}/${fileName}`;\n\n  const { data, error } = await client.storage\n    .from(bucketName)\n    .upload(filePath, file, {\n      cacheControl: \"3600\",\n      upsert: false,\n    });\n\n  if (error) {\n    throw new Error(`Upload failed: ${error.message}`);\n  }\n\n  const {\n    data: { publicUrl },\n  } = client.storage.from(bucketName).getPublicUrl(filePath);\n\n  return {\n    url: publicUrl,\n    path: filePath,\n  };\n}\n\nexport async function getChatRooms(\n  client: ReturnType<typeof createSupabaseClient>,\n) {\n  const { data, error } = await client\n    .from(\"chat_rooms\")\n    .select(\n      `\n      *,\n      messages (\n        id,\n        content,\n        created_at,\n        is_from_admin\n      )\n    `,\n    )\n    .order(\"updated_at\", { ascending: false });\n\n  if (error) throw error;\n  return data;\n}\n\nexport async function getMessages(\n  client: ReturnType<typeof createSupabaseClient>,\n  roomId: string,\n  limit: number = 50,\n) {\n  const { data, error } = await client\n    .from(\"messages\")\n    .select(\"*\")\n    .eq(\"room_id\", roomId)\n    .order(\"created_at\", { ascending: true })\n    .limit(limit);\n\n  if (error) throw error;\n  return data;\n}\n\nexport async function createChatRoom(\n  client: ReturnType<typeof createSupabaseClient>,\n  isGuestRoom: boolean = true,\n  guestSessionId?: string,\n  name?: string,\n) {\n  const { data, error } = await client\n    .from(\"chat_rooms\")\n    .insert({\n      name,\n      is_guest_room: isGuestRoom,\n      guest_session_id: guestSessionId,\n    })\n    .select()\n    .single();\n\n  if (error) throw error;\n  return data;\n}\n\nexport async function createMessage(\n  client: ReturnType<typeof createSupabaseClient>,\n  roomId: string,\n  content: string,\n  options: {\n    userId?: string;\n    guestSessionId?: string;\n    isFromAdmin?: boolean;\n    messageType?: \"text\" | \"file\" | \"system\";\n    fileUrl?: string;\n    fileName?: string;\n    fileSize?: number;\n  } = {},\n) {\n  const { data, error } = await client\n    .from(\"messages\")\n    .insert({\n      room_id: roomId,\n      user_id: options.userId || null,\n      guest_session_id: options.guestSessionId || null,\n      content,\n      message_type: options.messageType || \"text\",\n      file_url: options.fileUrl || null,\n      file_name: options.fileName || null,\n      file_size: options.fileSize || null,\n      is_from_admin: options.isFromAdmin || false,\n    })\n    .select()\n    .single();\n\n  if (error) throw error;\n  return data;\n}\n\nexport async function updateUserLastSeen(\n  client: ReturnType<typeof createSupabaseClient>,\n  userId?: string,\n  guestSessionId?: string,\n) {\n  const { error } = await client.from(\"chat_users\").upsert({\n    user_id: userId || null,\n    guest_session_id: guestSessionId || null,\n    last_seen: new Date().toISOString(),\n  });\n\n  if (error) throw error;\n}\n",
      "type": "registry:lib",
      "target": "~/lib/supabase/client.ts"
    },
    {
      "path": "registry/supachat/lib/supabase/server.ts",
      "content": "/**\n * SupaChat - Supabase Server Utilities\n * Server-side Supabase configuration and helpers for SSR/API.\n */\n\nimport type { Database } from \"@/lib/supachat/types\";\nimport { createServerClient } from \"@supabase/ssr\";\nimport { cookies } from \"next/headers\";\n\nexport async function createSupabaseServerClient() {\n  const cookieStore = await cookies();\n\n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll();\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options),\n            );\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    },\n  );\n}\n\nexport async function getServerSession() {\n  const supabase = await createSupabaseServerClient();\n  const {\n    data: { session },\n  } = await supabase.auth.getSession();\n  return session;\n}\n\nexport async function getServerUser() {\n  const supabase = await createSupabaseServerClient();\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n  return user;\n}\n\nexport async function getChatRoomsServer() {\n  const supabase = await createSupabaseServerClient();\n\n  const { data, error } = await supabase\n    .from(\"chat_rooms\")\n    .select(\n      `\n      *,\n      messages (\n        id,\n        content,\n        created_at,\n        is_from_admin\n      )\n    `,\n    )\n    .order(\"updated_at\", { ascending: false });\n\n  if (error) throw error;\n  return data;\n}\n\nexport async function getMessagesServer(roomId: string, limit: number = 50) {\n  const supabase = await createSupabaseServerClient();\n\n  const { data, error } = await supabase\n    .from(\"messages\")\n    .select(\"*\")\n    .eq(\"room_id\", roomId)\n    .order(\"created_at\", { ascending: true })\n    .limit(limit);\n\n  if (error) throw error;\n  return data;\n}\n\nexport async function createChatRoomServer(\n  isGuestRoom: boolean = true,\n  guestSessionId?: string,\n  name?: string,\n) {\n  const supabase = await createSupabaseServerClient();\n\n  const { data, error } = await supabase\n    .from(\"chat_rooms\")\n    .insert({\n      name,\n      is_guest_room: isGuestRoom,\n      guest_session_id: guestSessionId,\n    })\n    .select()\n    .single();\n\n  if (error) throw error;\n  return data;\n}\n\nexport async function createMessageServer(\n  roomId: string,\n  content: string,\n  options: {\n    userId?: string;\n    guestSessionId?: string;\n    isFromAdmin?: boolean;\n    messageType?: \"text\" | \"file\" | \"system\";\n    fileUrl?: string;\n    fileName?: string;\n    fileSize?: number;\n  } = {},\n) {\n  const supabase = await createSupabaseServerClient();\n\n  const { data, error } = await supabase\n    .from(\"messages\")\n    .insert({\n      room_id: roomId,\n      user_id: options.userId || null,\n      guest_session_id: options.guestSessionId || null,\n      content,\n      message_type: options.messageType || \"text\",\n      file_url: options.fileUrl || null,\n      file_name: options.fileName || null,\n      file_size: options.fileSize || null,\n      is_from_admin: options.isFromAdmin || false,\n    })\n    .select()\n    .single();\n\n  if (error) throw error;\n  return data;\n}\n\nexport async function updateUserLastSeenServer(\n  userId?: string,\n  guestSessionId?: string,\n) {\n  const supabase = await createSupabaseServerClient();\n\n  const { error } = await supabase.from(\"chat_users\").upsert({\n    user_id: userId || null,\n    guest_session_id: guestSessionId || null,\n    last_seen: new Date().toISOString(),\n  });\n\n  if (error) throw error;\n}\n\nexport async function getChatUserServer(\n  userId?: string,\n  guestSessionId?: string,\n) {\n  const supabase = await createSupabaseServerClient();\n\n  const { data, error } = await supabase\n    .from(\"chat_users\")\n    .select(\"*\")\n    .or(`user_id.eq.${userId},guest_session_id.eq.${guestSessionId}`)\n    .single();\n\n  if (error && error.code !== \"PGRST116\") throw error;\n  return data;\n}\n\nexport async function createChatUserServer(\n  userId?: string,\n  guestSessionId?: string,\n  name?: string,\n  email?: string,\n  isAdmin: boolean = false,\n) {\n  const supabase = await createSupabaseServerClient();\n\n  const { data, error } = await supabase\n    .from(\"chat_users\")\n    .insert({\n      user_id: userId || null,\n      guest_session_id: guestSessionId || null,\n      name,\n      email,\n      is_admin: isAdmin,\n      last_seen: new Date().toISOString(),\n    })\n    .select()\n    .single();\n\n  if (error) throw error;\n  return data;\n}\n\nexport async function getAdminRoomsServer() {\n  const supabase = await createSupabaseServerClient();\n\n  const { data, error } = await supabase\n    .from(\"chat_rooms\")\n    .select(\n      `\n      *,\n      messages (\n        id,\n        content,\n        created_at,\n        is_from_admin\n      ),\n      chat_users (\n        id,\n        name,\n        email,\n        is_admin,\n        last_seen\n      )\n    `,\n    )\n    .order(\"updated_at\", { ascending: false });\n\n  if (error) throw error;\n  return data;\n}\n\nexport async function assignAdminToRoomServer(roomId: string, adminId: string) {\n  const supabase = await createSupabaseServerClient();\n\n  const { error } = await supabase\n    .from(\"chat_users\")\n    .update({ assigned_admin_id: adminId })\n    .eq(\"id\", roomId);\n\n  if (error) throw error;\n}\n\nexport async function deleteRoomServer(roomId: string) {\n  const supabase = await createSupabaseServerClient();\n\n  const { error } = await supabase.from(\"chat_rooms\").delete().eq(\"id\", roomId);\n\n  if (error) throw error;\n}\n",
      "type": "registry:lib",
      "target": "~/lib/supabase/server.ts"
    },
    {
      "path": "registry/supachat/lib/supabase/middleware.ts",
      "content": "/**\n * SupaChat - Supabase Middleware\n * Middleware for session management and admin route protection.\n */\n\nimport { createServerClient } from \"@supabase/ssr\";\nimport { NextResponse, type NextRequest } from \"next/server\";\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  });\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll();\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value }) =>\n            request.cookies.set(name, value),\n          );\n          supabaseResponse = NextResponse.next({\n            request,\n          });\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options),\n          );\n        },\n      },\n    },\n  );\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n\n  if (request.nextUrl.pathname.startsWith(\"/admin\")) {\n    if (!user) {\n      const url = request.nextUrl.clone();\n      url.pathname = \"/auth/login\";\n      return NextResponse.redirect(url);\n    }\n\n    const { data: userProfile } = await supabase\n      .from(\"chat_users\")\n      .select(\"is_admin\")\n      .eq(\"user_id\", user.id)\n      .single();\n\n    if (!userProfile?.is_admin) {\n      const url = request.nextUrl.clone();\n      url.pathname = \"/\";\n      return NextResponse.redirect(url);\n    }\n  }\n\n  if (request.nextUrl.pathname.startsWith(\"/chat\")) {\n    return supabaseResponse;\n  }\n\n  return supabaseResponse;\n}\n\nexport async function isAdmin(userId: string) {\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return [];\n        },\n        setAll() {\n          // No-op for server-side checks\n        },\n      },\n    },\n  );\n\n  const { data: userProfile } = await supabase\n    .from(\"chat_users\")\n    .select(\"is_admin\")\n    .eq(\"user_id\", userId)\n    .single();\n\n  return userProfile?.is_admin || false;\n}\n",
      "type": "registry:lib",
      "target": "~/lib/supabase/middleware.ts"
    },
    {
      "path": "registry/supachat/middleware.ts",
      "content": "import { updateSession } from \"@/lib/supabase/middleware\";\nimport { type NextRequest } from \"next/server\";\n\nexport async function middleware(request: NextRequest) {\n  return await updateSession(request);\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public files (images, etc.)\n     * Feel free to modify this pattern to include more paths.\n     */\n    \"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\n  ],\n};\n",
      "type": "registry:file",
      "target": "~/src/middleware.ts"
    },
    {
      "path": "registry/supachat/migrations/supabase/supachat-schema.sql",
      "content": "-- SupaChat Database Schema\n-- Complete schema for production-ready chat system\n\n-- Enable necessary extensions\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n-- Chat rooms table\nCREATE TABLE chat_rooms (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  name TEXT,\n  is_guest_room BOOLEAN DEFAULT false,\n  guest_session_id UUID,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Messages table\nCREATE TABLE messages (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  room_id UUID REFERENCES chat_rooms(id) ON DELETE CASCADE,\n  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,\n  guest_session_id UUID,\n  content TEXT NOT NULL,\n  message_type TEXT DEFAULT 'text' CHECK (message_type IN ('text', 'file', 'system')),\n  file_url TEXT,\n  file_name TEXT,\n  file_size INTEGER,\n  is_from_admin BOOLEAN DEFAULT false,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Chat users (for admin assignment)\nCREATE TABLE chat_users (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,\n  guest_session_id UUID UNIQUE,\n  name TEXT,\n  email TEXT,\n  is_admin BOOLEAN DEFAULT false,\n  assigned_admin_id UUID REFERENCES auth.users(id),\n  last_seen TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- RLS Policies\nALTER TABLE chat_rooms ENABLE ROW LEVEL SECURITY;\nALTER TABLE messages ENABLE ROW LEVEL SECURITY;\nALTER TABLE chat_users ENABLE ROW LEVEL SECURITY;\n\n-- Simple, effective policies for chat_rooms\nCREATE POLICY \"Enable read access for all users\" ON chat_rooms\n  FOR SELECT USING (true);\n\nCREATE POLICY \"Enable insert for authenticated users and guests\" ON chat_rooms\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL OR guest_session_id IS NOT NULL);\n\nCREATE POLICY \"Enable update for room owners and admins\" ON chat_rooms\n  FOR UPDATE USING (\n    auth.uid() IN (SELECT user_id FROM chat_users WHERE is_admin = true) OR\n    guest_session_id = chat_rooms.guest_session_id\n  );\n\n-- Simple, effective policies for messages\nCREATE POLICY \"Enable read access for all users\" ON messages\n  FOR SELECT USING (true);\n\nCREATE POLICY \"Enable insert for authenticated users and guests\" ON messages\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL OR guest_session_id IS NOT NULL);\n\nCREATE POLICY \"Enable update for admins only\" ON messages\n  FOR UPDATE USING (\n    auth.uid() IN (SELECT user_id FROM chat_users WHERE is_admin = true)\n  );\n\n-- Simple, effective policies for chat_users\nCREATE POLICY \"Enable read access for all users\" ON chat_users\n  FOR SELECT USING (true);\n\nCREATE POLICY \"Enable insert for authenticated users and guests\" ON chat_users\n  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL OR guest_session_id IS NOT NULL);\n\nCREATE POLICY \"Enable update for users and admins\" ON chat_users\n  FOR UPDATE USING (\n    auth.uid() = user_id OR\n    guest_session_id = chat_users.guest_session_id OR\n    auth.uid() IN (SELECT user_id FROM chat_users WHERE is_admin = true)\n  );\n\n-- Functions\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\nCREATE TRIGGER update_chat_rooms_updated_at \n  BEFORE UPDATE ON chat_rooms \n  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- Function to get unread message count\nCREATE OR REPLACE FUNCTION get_unread_count(room_id UUID)\nRETURNS INTEGER AS $$\nBEGIN\n  RETURN (\n    SELECT COUNT(*) \n    FROM messages \n    WHERE messages.room_id = get_unread_count.room_id \n    AND messages.is_from_admin = true\n    AND messages.created_at > (\n      SELECT COALESCE(MAX(last_seen), '1970-01-01'::timestamp) \n      FROM chat_users \n      WHERE chat_users.user_id = auth.uid() OR chat_users.guest_session_id IS NOT NULL\n    )\n  );\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Indexes for performance\nCREATE INDEX idx_messages_room_id ON messages(room_id);\nCREATE INDEX idx_messages_created_at ON messages(created_at);\nCREATE INDEX idx_chat_users_guest_session ON chat_users(guest_session_id);\nCREATE INDEX idx_chat_rooms_guest_session ON chat_rooms(guest_session_id);\nCREATE INDEX idx_chat_users_user_id ON chat_users(user_id);\nCREATE INDEX idx_chat_users_is_admin ON chat_users(is_admin);\nCREATE INDEX idx_messages_is_from_admin ON messages(is_from_admin);\n\n-- Storage bucket for file uploads\nINSERT INTO storage.buckets (id, name, public) \nVALUES ('chat-files', 'chat-files', true)\nON CONFLICT (id) DO NOTHING;\n\n-- Storage policies\nCREATE POLICY \"Anyone can view chat files\" ON storage.objects\n  FOR SELECT USING (bucket_id = 'chat-files');\n\nCREATE POLICY \"Authenticated users can upload chat files\" ON storage.objects\n  FOR INSERT WITH CHECK (\n    bucket_id = 'chat-files' AND \n    auth.role() = 'authenticated'\n  );\n\nCREATE POLICY \"Users can update their own chat files\" ON storage.objects\n  FOR UPDATE USING (\n    bucket_id = 'chat-files' AND \n    auth.uid()::text = (storage.foldername(name))[1]\n  );\n\nCREATE POLICY \"Users can delete their own chat files\" ON storage.objects\n  FOR DELETE USING (\n    bucket_id = 'chat-files' AND \n    auth.uid()::text = (storage.foldername(name))[1]\n  ); ",
      "type": "registry:file",
      "target": "~/migrations/supabase/supachat-schema.sql"
    },
    {
      "path": "registry/supachat/supachat-setup.md",
      "content": "# SupaChat - Production-Ready Chat System\n\nA complete, realtime chat system built with Supabase, React, and TypeScript. Features realtime messaging, admin panel, file uploads, typing indicators, and guest session support.\n\n## 🚀 Quick Start\n\n### Installation\n\n```bash\n# Install via shadcn CLI\nnpx shadcn@latest add https://supachat.site/r/supachat\n\n# Or install manually\nnpm install @supabase/supabase-js @supabase/ssr react-markdown date-fns lucide-react clsx tailwind-merge zod react-dropzone emoji-datasource\n```\n\n### Dependencies\n\nSupaChat requires the following dependencies:\n\n**Core Dependencies:**\n\n- `@supabase/supabase-js` - Supabase client library\n- `@supabase/ssr` - Server-side rendering support\n- `react-markdown` - Markdown rendering for messages\n- `date-fns` - Date formatting utilities\n- `lucide-react` - Icon library\n- `clsx` - Conditional className utility\n- `tailwind-merge` - Tailwind CSS class merging\n- `zod` - Schema validation\n- `react-dropzone` - File upload handling\n- `emoji-datasource` - Emoji data and utilities\n\n**ShadCN UI Dependencies:**\n\n- `button`, `input`, `card`, `avatar`, `badge`\n- `scroll-area`, `textarea`, `dropdown-menu`\n- `popover`, `separator`, `sheet`\n\nThese are automatically installed when using the shadcn CLI.\n\n### Environment Setup\n\nCreate `.env.local`:\n\n```bash\nNEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\n```\n\n### Database Setup\n\n1. Go to your Supabase project dashboard\n2. Open SQL Editor\n3. Run the schema from `migrations/supabase/supachat-schema.sql`\n4. Verify tables and policies are created\n\n### Basic Usage\n\n```tsx\n// app/layout.tsx\nimport { ChatWidget } from \"@/components/supachat/chat-widget\";\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div>\n      {children}\n      <ChatWidget\n        position=\"bottom-right\"\n        title=\"Support Team\"\n        showOnLoad={false}\n      />\n    </div>\n  );\n}\n```\n\n## 🎉 Installation Success\n\nAfter installation, you'll see this message:\n\n```\n🎉 SupaChat installed successfully!\n\n📋 Next steps:\n1. Run the SQL schema in your Supabase SQL Editor\n2. Add your Supabase keys to .env.local\n3. Add <ChatWidget /> to your layout\n4. Create an admin page with <AdminPanel />\n5. Middleware automatically protects admin routes\n6. Customize the configuration as needed\n\n📖 See supachat-setup.md for detailed instructions.\n```\n\n## 📁 Project Structure\n\nAfter installation, you'll have:\n\n```\ncomponents/\n├── ui/                    # ShadCN UI primitives\n│   ├── avatar.tsx\n│   ├── badge.tsx\n│   ├── button.tsx\n│   ├── card.tsx\n│   ├── dropdown-menu.tsx\n│   ├── input.tsx\n│   ├── popover.tsx\n│   ├── scroll-area.tsx\n│   ├── separator.tsx\n│   ├── sheet.tsx\n│   └── textarea.tsx\n└── supachat/             # SupaChat components\n    ├── chat-widget.tsx\n    ├── admin-panel.tsx\n    ├── message-bubble.tsx\n    ├── typing-indicator.tsx\n    ├── file-upload.tsx\n    └── emoji-picker.tsx\n\nhooks/\n└── supachat/             # SupaChat hooks\n    ├── use-chat.ts\n    ├── use-chat-status.ts\n    ├── use-admin.ts\n    ├── use-chat-session.ts\n    └── use-chat-store.ts\n\nlib/\n├── supachat/             # SupaChat configuration\n│   ├── config.ts\n│   ├── types.ts\n│   └── utils.ts\n└── supabase/             # Supabase configuration\n    ├── client.ts\n    ├── server.ts\n    └── middleware.ts\n\nmigrations/\n└── supabase/\n    └── supachat-schema.sql\n\nmiddleware.ts             # Next.js middleware\nsupachat-setup.md         # This documentation\n```\n\n## 🎯 Core Components\n\n### ChatWidget\n\nThe main chat interface with configurable positioning and behavior.\n\n```tsx\nimport { ChatWidget } from \"@/components/supachat/chat-widget\";\n\n<ChatWidget\n  // Positioning\n  position=\"bottom-right\" // \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\"\n  size={{ width: 400, height: 600 }}\n  // Appearance\n  title=\"Customer Support\"\n  className=\"custom-styles\"\n  // Behavior\n  showOnLoad={false}\n  enableUploads={true}\n  enableEmojis={true}\n  // Welcome messages\n  welcomeMessages={[\n    {\n      content: \"👋 Welcome! How can I help?\",\n      delay: 500,\n      isFromAdmin: true,\n      buttons: [\n        {\n          label: \"View Docs\",\n          value: \"/docs\",\n          callback: () => (window.location.href = \"/docs\"),\n        },\n      ],\n    },\n  ]}\n/>;\n```\n\n### AdminPanel\n\nComplete admin interface for managing conversations.\n\n```tsx\n// app/admin/page.tsx\nimport { AdminPanel } from \"@/components/supachat/admin-panel\";\n\nexport default function AdminPage() {\n  return (\n    <div className=\"h-screen\">\n      <AdminPanel />\n    </div>\n  );\n}\n```\n\n### MessageBubble\n\nIndividual message display with file support.\n\n```tsx\nimport { MessageBubble } from \"@/components/supachat/message-bubble\";\n\n<MessageBubble\n  message={message}\n  isOwnMessage={message.userId === currentUserId}\n  showTimestamp={true}\n  showAvatar={true}\n  buttons={message.buttons}\n  onButtonClick={handleButtonClick}\n/>;\n```\n\n### TypingIndicator\n\nAnimated typing indicator.\n\n```tsx\nimport { TypingIndicator } from \"@/components/supachat/typing-indicator\";\n\n<TypingIndicator\n  isTyping={true}\n  showAvatar={true}\n  className=\"custom-typing-styles\"\n/>;\n```\n\n### FileUpload\n\nFile upload with drag-and-drop support.\n\n```tsx\nimport { FileUploadButton } from \"@/components/supachat/file-upload\";\n\n<FileUploadButton\n  onFileSelect={handleFileUpload}\n  maxSize={10 * 1024 * 1024} // 10MB\n  allowedTypes={[\"image/*\", \"application/pdf\", \"text/*\"]}\n  disabled={false}\n/>;\n```\n\n### EmojiPicker\n\nAdvanced emoji picker with search and categories.\n\n```tsx\nimport { EmojiPicker } from \"@/components/supachat/emoji-picker\";\n\n<EmojiPicker onSelect={handleEmojiSelect} disabled={false} />;\n```\n\n## 🔧 Configuration\n\n### Default Configuration\n\n```typescript\n// lib/supachat/config.ts\nexport const defaultConfig: SupaChatConfig = {\n  supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n  localStorageKey: \"supachat-store\",\n\n  // Welcome messages\n  welcomeMessages: [\n    {\n      content:\n        \"👋 Welcome! I'm here to help you get the most out of our platform.\",\n      delay: 500,\n      isFromAdmin: true,\n    },\n    {\n      content: \"What would you like to explore today?\",\n      delay: 800,\n      isFromAdmin: true,\n      buttons: [\n        {\n          label: \"📚 Documentation\",\n          value: \"/docs\",\n          callback: () => (window.location.href = \"/docs\"),\n        },\n      ],\n    },\n  ],\n\n  // Features\n  enableUploads: true,\n  enableEmojis: true,\n  enablePresence: true,\n\n  // Behavior\n  agentTypingDelay: 800,\n  inputLockedAfterSend: true,\n  maxMessageLength: 2000,\n\n  // Widget settings\n  chatWidgetPosition: \"bottom-right\",\n  chatWidgetSize: { width: 400, height: 650 },\n\n  // File upload settings\n  maxFileSize: 10 * 1024 * 1024, // 10MB\n  allowedFileTypes: [\"image/*\", \"application/pdf\", \"text/*\"],\n\n  // Admin settings\n  adminRole: \"admin\",\n  autoAssignAdmin: true,\n\n  // Session settings\n  guestSessionExpiry: 24 * 60 * 60 * 1000, // 24 hours\n  theme: \"system\",\n};\n```\n\n### Custom Configuration\n\n```tsx\n// Override defaults in components\n<ChatWidget\n  enableUploads={false}\n  agentTypingDelay={2000}\n  theme=\"dark\"\n  chatWidgetPosition=\"bottom-left\"\n  chatWidgetSize={{ width: 500, height: 700 }}\n  maxFileSize={5 * 1024 * 1024} // 5MB\n  allowedFileTypes={[\"image/*\"]}\n/>\n```\n\n## 🪝 Hooks\n\n### useChat\n\nMain chat functionality hook.\n\n```tsx\nimport { useChat } from \"@/hooks/supachat/use-chat\";\nimport { validateConfig, defaultConfig } from \"@/lib/supachat/config\";\n\nfunction MyChatComponent() {\n  const config = validateConfig(defaultConfig);\n  const {\n    messages,\n    sendMessage,\n    isLoading,\n    error,\n    createRoom,\n    currentRoom,\n    hasNewMessages,\n    markAsRead,\n  } = useChat(config);\n\n  const handleSend = async (content: string) => {\n    await sendMessage(content);\n  };\n\n  return (\n    <div>\n      {messages.map((msg) => (\n        <MessageBubble key={msg.id} message={msg} />\n      ))}\n      {/* Chat input */}\n    </div>\n  );\n}\n```\n\n### useAdmin\n\nAdmin operations and room management.\n\n```tsx\nimport { useAdmin } from \"@/hooks/supachat/use-admin\";\n\nfunction AdminComponent() {\n  const config = validateConfig(defaultConfig);\n  const {\n    rooms,\n    selectedRoom,\n    isLoading,\n    error,\n    sendAdminMessage,\n    deleteRoom,\n    markAsRead,\n    assignAdmin,\n    getRoomStats,\n  } = useAdmin(config);\n\n  const handleSendAdminMessage = async (roomId: string, content: string) => {\n    await sendAdminMessage(roomId, content);\n  };\n\n  return (\n    <div>\n      {rooms.map((room) => (\n        <div key={room.id}>\n          <h3>{room.name}</h3>\n          <p>Unread: {room.unreadCount}</p>\n          <button onClick={() => markAsRead(room.id)}>Mark as Read</button>\n        </div>\n      ))}\n    </div>\n  );\n}\n```\n\n### useChatStatus\n\nPresence and typing management.\n\n```tsx\nimport { useChatStatus } from \"@/hooks/supachat/use-chat-status\";\n\nfunction ChatStatusComponent() {\n  const config = validateConfig(defaultConfig);\n  const {\n    isTyping,\n    isOnline,\n    lastSeen,\n    typingUsers,\n    setTyping,\n    updateLastSeen,\n  } = useChatStatus(config);\n\n  return (\n    <div>\n      <div className={`status ${isOnline ? \"online\" : \"offline\"}`}>\n        {isOnline ? \"Online\" : \"Offline\"}\n      </div>\n      {isTyping && <TypingIndicator />}\n    </div>\n  );\n}\n```\n\n### useChatSession\n\nSession management and persistence.\n\n```tsx\nimport { useChatSession } from \"@/hooks/supachat/use-chat-session\";\n\nfunction SessionComponent() {\n  const config = validateConfig(defaultConfig);\n  const { sessionId, isNewSession, restoreSession, clearSession } =\n    useChatSession(config);\n\n  return (\n    <div>\n      <p>Session: {sessionId}</p>\n      {isNewSession && <p>New session started</p>}\n      <button onClick={clearSession}>Clear Session</button>\n    </div>\n  );\n}\n```\n\n### useChatStore\n\nGlobal state management with Zustand.\n\n```tsx\nimport { createChatStore } from \"@/hooks/supachat/use-chat-store\";\n\nfunction StoreComponent() {\n  const chatStore = createChatStore({ localStorageKey: \"my-chat-store\" });\n  const sessionId = chatStore((s) => s.sessionId);\n  const setSessionId = chatStore((s) => s.setSessionId);\n  const messages = chatStore((s) => s.messages);\n  const addMessage = chatStore((s) => s.addMessage);\n\n  return (\n    <div>\n      <p>Session: {sessionId}</p>\n      <p>Messages: {messages.length}</p>\n      <button onClick={() => addMessage(newMessage)}>Add Message</button>\n    </div>\n  );\n}\n```\n\n## 🗄️ Database Schema\n\n### Tables\n\n- **chat_rooms**: Conversation metadata\n- **messages**: Individual messages with file support\n- **chat_users**: User information and admin assignments\n\n### Key Features\n\n- Row-level security (RLS) policies\n- Automatic timestamps\n- File upload support\n- Guest session isolation\n- Admin role management\n\n### Storage\n\n- `chat-files` bucket for file uploads\n- Secure access policies\n- Automatic cleanup\n\n## 🔒 Security\n\n### Authentication\n\n- Supports authenticated users and guest sessions\n- Row-level security protects all data\n- Admin access via role-based permissions\n- Secure session management\n\n### Data Protection\n\n- Messages encrypted in transit\n- Guest sessions properly isolated\n- File uploads secured\n- No sensitive data in client code\n\n## 🎨 Styling\n\n### CSS Variables\n\nThe system includes custom CSS variables for theming:\n\n```css\n:root {\n  --chat-primary: 222.2 84% 4.9%;\n  --chat-primary-foreground: 210 40% 98%;\n  --chat-secondary: 210 40% 96%;\n  --chat-secondary-foreground: 222.2 84% 4.9%;\n  --chat-muted: 210 40% 96%;\n  --chat-muted-foreground: 215.4 16.3% 46.9%;\n  --chat-accent: 210 40% 96%;\n  --chat-accent-foreground: 222.2 84% 4.9%;\n  --chat-border: 214.3 31.8% 91.4%;\n  --chat-input: 0 0% 100%;\n  --chat-ring: 222.2 84% 4.9%;\n}\n```\n\n### Custom Styling\n\n```tsx\n<ChatWidget\n  className=\"custom-chat-widget\"\n  style={\n    {\n      \"--chat-primary\": \"220 14% 96%\",\n      \"--chat-primary-foreground\": \"220 9% 46%\",\n    } as React.CSSProperties\n  }\n/>\n```\n\n## 🚀 Advanced Features\n\n### Realtime Messaging\n\n- Supabase realtime subscriptions\n- Automatic message synchronization\n- Typing indicators\n- Online/offline status\n\n### File Uploads\n\n- Drag-and-drop interface\n- File type validation\n- Image previews\n- Progress indicators\n\n### Guest Sessions\n\n- Automatic UUID generation\n- Persistent sessions\n- Secure isolation\n- Configurable expiry\n\n### Admin Features\n\n- Real-time conversation monitoring\n- Message history and search\n- Admin assignment\n- Conversation management\n\n## 🔧 Middleware\n\nThe middleware automatically:\n\n- Protects admin routes (`/admin/*`)\n- Redirects unauthenticated users to `/auth/login`\n- Redirects non-admin users to `/`\n- Allows guest access to chat routes\n\n```typescript\n// middleware.ts (automatically installed)\nexport async function middleware(request: NextRequest) {\n  return await updateSession(request);\n}\n```\n\n## 📱 Responsive Design\n\nAll components are fully responsive:\n\n- Mobile-first design\n- Touch-friendly interfaces\n- Adaptive layouts\n- Optimized for all screen sizes\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n1. **Messages not appearing**\n\n   - Verify RLS policies in Supabase\n   - Check environment variables\n   - Ensure database schema is applied\n\n2. **Realtime not working**\n\n   - Verify Supabase URL and anon key\n   - Check network connectivity\n   - Ensure realtime is enabled in Supabase\n\n3. **File uploads failing**\n\n   - Verify storage bucket permissions\n   - Check file size limits\n   - Ensure bucket policies are correct\n\n4. **Admin access denied**\n   - Check user roles in `chat_users` table\n   - Verify admin configuration\n   - Ensure middleware is working\n\n### Debug Mode\n\n```typescript\nconst config = validateConfig({\n  ...defaultConfig,\n  debug: true, // Enable debug logging\n});\n```\n\n### Error Handling\n\n```tsx\nconst { error, isLoading } = useChat(config);\n\nif (error) {\n  return (\n    <div className=\"error-message\">\n      <p>Error: {error}</p>\n      <button onClick={() => window.location.reload()}>Retry</button>\n    </div>\n  );\n}\n```\n\n## 📚 API Reference\n\n### Components\n\n| Component          | Description         | Props                   |\n| ------------------ | ------------------- | ----------------------- |\n| `ChatWidget`       | Main chat interface | `ChatWidgetProps`       |\n| `AdminPanel`       | Admin dashboard     | `AdminPanelProps`       |\n| `MessageBubble`    | Message display     | `MessageBubbleProps`    |\n| `TypingIndicator`  | Typing animation    | `TypingIndicatorProps`  |\n| `FileUploadButton` | File upload         | `FileUploadButtonProps` |\n| `EmojiPicker`      | Emoji selection     | `EmojiPickerProps`      |\n\n### Hooks\n\n| Hook             | Description             | Returns                        |\n| ---------------- | ----------------------- | ------------------------------ |\n| `useChat`        | Core chat functionality | Chat state and methods         |\n| `useAdmin`       | Admin operations        | Admin state and methods        |\n| `useChatStatus`  | Presence management     | Status state and methods       |\n| `useChatSession` | Session management      | Session state and methods      |\n| `useChatStore`   | Global state management | Zustand store with persistence |\n\n### Types\n\n```typescript\ninterface ChatMessage {\n  id: string;\n  roomId: string;\n  userId?: string;\n  guestSessionId?: string;\n  content: string;\n  messageType: \"text\" | \"file\" | \"system\";\n  fileUrl?: string;\n  fileName?: string;\n  fileSize?: number;\n  isFromAdmin: boolean;\n  createdAt: string;\n}\n\ninterface SupaChatConfig {\n  supabaseUrl: string;\n  supabaseAnonKey: string;\n  welcomeMessages?: WelcomeMessage[];\n  enableUploads?: boolean;\n  enableEmojis?: boolean;\n  agentTypingDelay?: number;\n  inputLockedAfterSend?: boolean;\n  adminRole?: string;\n  theme?: \"light\" | \"dark\" | \"system\";\n  maxMessageLength?: number;\n  enablePresence?: boolean;\n  autoAssignAdmin?: boolean;\n  guestSessionExpiry?: number;\n  chatWidgetPosition?:\n    | \"bottom-right\"\n    | \"bottom-left\"\n    | \"top-right\"\n    | \"top-left\";\n  chatWidgetSize?: { width: number; height: number };\n  maxFileSize?: number;\n  allowedFileTypes?: string[];\n}\n```\n",
      "type": "registry:file",
      "target": "~/supachat-setup.md"
    }
  ],
  "cssVars": {
    "light": {
      "chat-primary": "222.2 84% 4.9%",
      "chat-primary-foreground": "210 40% 98%",
      "chat-secondary": "210 40% 96%",
      "chat-secondary-foreground": "222.2 84% 4.9%",
      "chat-muted": "210 40% 96%",
      "chat-muted-foreground": "215.4 16.3% 46.9%",
      "chat-accent": "210 40% 96%",
      "chat-accent-foreground": "222.2 84% 4.9%",
      "chat-border": "214.3 31.8% 91.4%",
      "chat-input": "0 0% 100%",
      "chat-ring": "222.2 84% 4.9%"
    },
    "dark": {
      "chat-primary": "210 40% 98%",
      "chat-primary-foreground": "222.2 84% 4.9%",
      "chat-secondary": "217.2 32.6% 17.5%",
      "chat-secondary-foreground": "210 40% 98%",
      "chat-muted": "217.2 32.6% 17.5%",
      "chat-muted-foreground": "215 20.2% 65.1%",
      "chat-accent": "217.2 32.6% 17.5%",
      "chat-accent-foreground": "210 40% 98%",
      "chat-border": "217.2 32.6% 17.5%",
      "chat-input": "222.2 84% 4.9%",
      "chat-ring": "212.7 26.8% 83.9%"
    }
  },
  "docs": "🎉 SupaChat installed successfully!\n\n📋 Next steps:\n1. Run the SQL schema in your Supabase SQL Editor\n2. Add your Supabase keys to .env.local\n3. Add <ChatWidget /> to your layout\n4. Create an admin page with <AdminPanel />\n5. Middleware automatically protects admin routes\n6. Customize the configuration as needed\n\n📖 See supachat-setup.md for detailed instructions.",
  "categories": [
    "chat",
    "realtime",
    "supabase",
    "admin",
    "messaging"
  ]
}